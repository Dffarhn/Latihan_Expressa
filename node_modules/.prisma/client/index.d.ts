
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Position
 * 
 */
export type Position = $Result.DefaultSelection<Prisma.$PositionPayload>
/**
 * Model Kahlova_Member
 * 
 */
export type Kahlova_Member = $Result.DefaultSelection<Prisma.$Kahlova_MemberPayload>
/**
 * Model Kahlova_Project
 * 
 */
export type Kahlova_Project = $Result.DefaultSelection<Prisma.$Kahlova_ProjectPayload>
/**
 * Model Project_Categori
 * 
 */
export type Project_Categori = $Result.DefaultSelection<Prisma.$Project_CategoriPayload>
/**
 * Model images
 * 
 */
export type images = $Result.DefaultSelection<Prisma.$imagesPayload>
/**
 * Model Project_Images
 * 
 */
export type Project_Images = $Result.DefaultSelection<Prisma.$Project_ImagesPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Positions
 * const positions = await prisma.position.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Positions
   * const positions = await prisma.position.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.position`: Exposes CRUD operations for the **Position** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Positions
    * const positions = await prisma.position.findMany()
    * ```
    */
  get position(): Prisma.PositionDelegate<ExtArgs>;

  /**
   * `prisma.kahlova_Member`: Exposes CRUD operations for the **Kahlova_Member** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Kahlova_Members
    * const kahlova_Members = await prisma.kahlova_Member.findMany()
    * ```
    */
  get kahlova_Member(): Prisma.Kahlova_MemberDelegate<ExtArgs>;

  /**
   * `prisma.kahlova_Project`: Exposes CRUD operations for the **Kahlova_Project** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Kahlova_Projects
    * const kahlova_Projects = await prisma.kahlova_Project.findMany()
    * ```
    */
  get kahlova_Project(): Prisma.Kahlova_ProjectDelegate<ExtArgs>;

  /**
   * `prisma.project_Categori`: Exposes CRUD operations for the **Project_Categori** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Project_Categoris
    * const project_Categoris = await prisma.project_Categori.findMany()
    * ```
    */
  get project_Categori(): Prisma.Project_CategoriDelegate<ExtArgs>;

  /**
   * `prisma.images`: Exposes CRUD operations for the **images** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Images
    * const images = await prisma.images.findMany()
    * ```
    */
  get images(): Prisma.imagesDelegate<ExtArgs>;

  /**
   * `prisma.project_Images`: Exposes CRUD operations for the **Project_Images** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Project_Images
    * const project_Images = await prisma.project_Images.findMany()
    * ```
    */
  get project_Images(): Prisma.Project_ImagesDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.10.2
   * Query Engine version: 5a9203d0590c951969e85a7d07215503f4672eb9
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Position: 'Position',
    Kahlova_Member: 'Kahlova_Member',
    Kahlova_Project: 'Kahlova_Project',
    Project_Categori: 'Project_Categori',
    images: 'images',
    Project_Images: 'Project_Images'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'position' | 'kahlova_Member' | 'kahlova_Project' | 'project_Categori' | 'images' | 'project_Images'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Position: {
        payload: Prisma.$PositionPayload<ExtArgs>
        fields: Prisma.PositionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PositionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PositionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PositionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PositionPayload>
          }
          findFirst: {
            args: Prisma.PositionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PositionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PositionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PositionPayload>
          }
          findMany: {
            args: Prisma.PositionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PositionPayload>[]
          }
          create: {
            args: Prisma.PositionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PositionPayload>
          }
          createMany: {
            args: Prisma.PositionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PositionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PositionPayload>
          }
          update: {
            args: Prisma.PositionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PositionPayload>
          }
          deleteMany: {
            args: Prisma.PositionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PositionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PositionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PositionPayload>
          }
          aggregate: {
            args: Prisma.PositionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePosition>
          }
          groupBy: {
            args: Prisma.PositionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PositionGroupByOutputType>[]
          }
          count: {
            args: Prisma.PositionCountArgs<ExtArgs>,
            result: $Utils.Optional<PositionCountAggregateOutputType> | number
          }
        }
      }
      Kahlova_Member: {
        payload: Prisma.$Kahlova_MemberPayload<ExtArgs>
        fields: Prisma.Kahlova_MemberFieldRefs
        operations: {
          findUnique: {
            args: Prisma.Kahlova_MemberFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Kahlova_MemberPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Kahlova_MemberFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Kahlova_MemberPayload>
          }
          findFirst: {
            args: Prisma.Kahlova_MemberFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Kahlova_MemberPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Kahlova_MemberFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Kahlova_MemberPayload>
          }
          findMany: {
            args: Prisma.Kahlova_MemberFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Kahlova_MemberPayload>[]
          }
          create: {
            args: Prisma.Kahlova_MemberCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Kahlova_MemberPayload>
          }
          createMany: {
            args: Prisma.Kahlova_MemberCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.Kahlova_MemberDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Kahlova_MemberPayload>
          }
          update: {
            args: Prisma.Kahlova_MemberUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Kahlova_MemberPayload>
          }
          deleteMany: {
            args: Prisma.Kahlova_MemberDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.Kahlova_MemberUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.Kahlova_MemberUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Kahlova_MemberPayload>
          }
          aggregate: {
            args: Prisma.Kahlova_MemberAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateKahlova_Member>
          }
          groupBy: {
            args: Prisma.Kahlova_MemberGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Kahlova_MemberGroupByOutputType>[]
          }
          count: {
            args: Prisma.Kahlova_MemberCountArgs<ExtArgs>,
            result: $Utils.Optional<Kahlova_MemberCountAggregateOutputType> | number
          }
        }
      }
      Kahlova_Project: {
        payload: Prisma.$Kahlova_ProjectPayload<ExtArgs>
        fields: Prisma.Kahlova_ProjectFieldRefs
        operations: {
          findUnique: {
            args: Prisma.Kahlova_ProjectFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Kahlova_ProjectPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Kahlova_ProjectFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Kahlova_ProjectPayload>
          }
          findFirst: {
            args: Prisma.Kahlova_ProjectFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Kahlova_ProjectPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Kahlova_ProjectFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Kahlova_ProjectPayload>
          }
          findMany: {
            args: Prisma.Kahlova_ProjectFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Kahlova_ProjectPayload>[]
          }
          create: {
            args: Prisma.Kahlova_ProjectCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Kahlova_ProjectPayload>
          }
          createMany: {
            args: Prisma.Kahlova_ProjectCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.Kahlova_ProjectDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Kahlova_ProjectPayload>
          }
          update: {
            args: Prisma.Kahlova_ProjectUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Kahlova_ProjectPayload>
          }
          deleteMany: {
            args: Prisma.Kahlova_ProjectDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.Kahlova_ProjectUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.Kahlova_ProjectUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Kahlova_ProjectPayload>
          }
          aggregate: {
            args: Prisma.Kahlova_ProjectAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateKahlova_Project>
          }
          groupBy: {
            args: Prisma.Kahlova_ProjectGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Kahlova_ProjectGroupByOutputType>[]
          }
          count: {
            args: Prisma.Kahlova_ProjectCountArgs<ExtArgs>,
            result: $Utils.Optional<Kahlova_ProjectCountAggregateOutputType> | number
          }
        }
      }
      Project_Categori: {
        payload: Prisma.$Project_CategoriPayload<ExtArgs>
        fields: Prisma.Project_CategoriFieldRefs
        operations: {
          findUnique: {
            args: Prisma.Project_CategoriFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Project_CategoriPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Project_CategoriFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Project_CategoriPayload>
          }
          findFirst: {
            args: Prisma.Project_CategoriFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Project_CategoriPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Project_CategoriFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Project_CategoriPayload>
          }
          findMany: {
            args: Prisma.Project_CategoriFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Project_CategoriPayload>[]
          }
          create: {
            args: Prisma.Project_CategoriCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Project_CategoriPayload>
          }
          createMany: {
            args: Prisma.Project_CategoriCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.Project_CategoriDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Project_CategoriPayload>
          }
          update: {
            args: Prisma.Project_CategoriUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Project_CategoriPayload>
          }
          deleteMany: {
            args: Prisma.Project_CategoriDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.Project_CategoriUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.Project_CategoriUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Project_CategoriPayload>
          }
          aggregate: {
            args: Prisma.Project_CategoriAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProject_Categori>
          }
          groupBy: {
            args: Prisma.Project_CategoriGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Project_CategoriGroupByOutputType>[]
          }
          count: {
            args: Prisma.Project_CategoriCountArgs<ExtArgs>,
            result: $Utils.Optional<Project_CategoriCountAggregateOutputType> | number
          }
        }
      }
      images: {
        payload: Prisma.$imagesPayload<ExtArgs>
        fields: Prisma.imagesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.imagesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$imagesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.imagesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$imagesPayload>
          }
          findFirst: {
            args: Prisma.imagesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$imagesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.imagesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$imagesPayload>
          }
          findMany: {
            args: Prisma.imagesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$imagesPayload>[]
          }
          create: {
            args: Prisma.imagesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$imagesPayload>
          }
          createMany: {
            args: Prisma.imagesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.imagesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$imagesPayload>
          }
          update: {
            args: Prisma.imagesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$imagesPayload>
          }
          deleteMany: {
            args: Prisma.imagesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.imagesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.imagesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$imagesPayload>
          }
          aggregate: {
            args: Prisma.ImagesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateImages>
          }
          groupBy: {
            args: Prisma.imagesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ImagesGroupByOutputType>[]
          }
          count: {
            args: Prisma.imagesCountArgs<ExtArgs>,
            result: $Utils.Optional<ImagesCountAggregateOutputType> | number
          }
        }
      }
      Project_Images: {
        payload: Prisma.$Project_ImagesPayload<ExtArgs>
        fields: Prisma.Project_ImagesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.Project_ImagesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Project_ImagesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Project_ImagesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Project_ImagesPayload>
          }
          findFirst: {
            args: Prisma.Project_ImagesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Project_ImagesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Project_ImagesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Project_ImagesPayload>
          }
          findMany: {
            args: Prisma.Project_ImagesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Project_ImagesPayload>[]
          }
          create: {
            args: Prisma.Project_ImagesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Project_ImagesPayload>
          }
          createMany: {
            args: Prisma.Project_ImagesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.Project_ImagesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Project_ImagesPayload>
          }
          update: {
            args: Prisma.Project_ImagesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Project_ImagesPayload>
          }
          deleteMany: {
            args: Prisma.Project_ImagesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.Project_ImagesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.Project_ImagesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Project_ImagesPayload>
          }
          aggregate: {
            args: Prisma.Project_ImagesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProject_Images>
          }
          groupBy: {
            args: Prisma.Project_ImagesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Project_ImagesGroupByOutputType>[]
          }
          count: {
            args: Prisma.Project_ImagesCountArgs<ExtArgs>,
            result: $Utils.Optional<Project_ImagesCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type PositionCountOutputType
   */

  export type PositionCountOutputType = {
    Kahlova_Member: number
  }

  export type PositionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Kahlova_Member?: boolean | PositionCountOutputTypeCountKahlova_MemberArgs
  }

  // Custom InputTypes

  /**
   * PositionCountOutputType without action
   */
  export type PositionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PositionCountOutputType
     */
    select?: PositionCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * PositionCountOutputType without action
   */
  export type PositionCountOutputTypeCountKahlova_MemberArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Kahlova_MemberWhereInput
  }



  /**
   * Count Type Project_CategoriCountOutputType
   */

  export type Project_CategoriCountOutputType = {
    Kahlova_Project: number
  }

  export type Project_CategoriCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Kahlova_Project?: boolean | Project_CategoriCountOutputTypeCountKahlova_ProjectArgs
  }

  // Custom InputTypes

  /**
   * Project_CategoriCountOutputType without action
   */
  export type Project_CategoriCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project_CategoriCountOutputType
     */
    select?: Project_CategoriCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * Project_CategoriCountOutputType without action
   */
  export type Project_CategoriCountOutputTypeCountKahlova_ProjectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Kahlova_ProjectWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Position
   */

  export type AggregatePosition = {
    _count: PositionCountAggregateOutputType | null
    _avg: PositionAvgAggregateOutputType | null
    _sum: PositionSumAggregateOutputType | null
    _min: PositionMinAggregateOutputType | null
    _max: PositionMaxAggregateOutputType | null
  }

  export type PositionAvgAggregateOutputType = {
    id: number | null
  }

  export type PositionSumAggregateOutputType = {
    id: number | null
  }

  export type PositionMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type PositionMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type PositionCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type PositionAvgAggregateInputType = {
    id?: true
  }

  export type PositionSumAggregateInputType = {
    id?: true
  }

  export type PositionMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type PositionMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type PositionCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type PositionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Position to aggregate.
     */
    where?: PositionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Positions to fetch.
     */
    orderBy?: PositionOrderByWithRelationInput | PositionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PositionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Positions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Positions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Positions
    **/
    _count?: true | PositionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PositionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PositionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PositionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PositionMaxAggregateInputType
  }

  export type GetPositionAggregateType<T extends PositionAggregateArgs> = {
        [P in keyof T & keyof AggregatePosition]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePosition[P]>
      : GetScalarType<T[P], AggregatePosition[P]>
  }




  export type PositionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PositionWhereInput
    orderBy?: PositionOrderByWithAggregationInput | PositionOrderByWithAggregationInput[]
    by: PositionScalarFieldEnum[] | PositionScalarFieldEnum
    having?: PositionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PositionCountAggregateInputType | true
    _avg?: PositionAvgAggregateInputType
    _sum?: PositionSumAggregateInputType
    _min?: PositionMinAggregateInputType
    _max?: PositionMaxAggregateInputType
  }

  export type PositionGroupByOutputType = {
    id: number
    name: string
    _count: PositionCountAggregateOutputType | null
    _avg: PositionAvgAggregateOutputType | null
    _sum: PositionSumAggregateOutputType | null
    _min: PositionMinAggregateOutputType | null
    _max: PositionMaxAggregateOutputType | null
  }

  type GetPositionGroupByPayload<T extends PositionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PositionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PositionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PositionGroupByOutputType[P]>
            : GetScalarType<T[P], PositionGroupByOutputType[P]>
        }
      >
    >


  export type PositionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    Kahlova_Member?: boolean | Position$Kahlova_MemberArgs<ExtArgs>
    _count?: boolean | PositionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["position"]>

  export type PositionSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type PositionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Kahlova_Member?: boolean | Position$Kahlova_MemberArgs<ExtArgs>
    _count?: boolean | PositionCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $PositionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Position"
    objects: {
      Kahlova_Member: Prisma.$Kahlova_MemberPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
    }, ExtArgs["result"]["position"]>
    composites: {}
  }


  type PositionGetPayload<S extends boolean | null | undefined | PositionDefaultArgs> = $Result.GetResult<Prisma.$PositionPayload, S>

  type PositionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PositionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PositionCountAggregateInputType | true
    }

  export interface PositionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Position'], meta: { name: 'Position' } }
    /**
     * Find zero or one Position that matches the filter.
     * @param {PositionFindUniqueArgs} args - Arguments to find a Position
     * @example
     * // Get one Position
     * const position = await prisma.position.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PositionFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PositionFindUniqueArgs<ExtArgs>>
    ): Prisma__PositionClient<$Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Position that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PositionFindUniqueOrThrowArgs} args - Arguments to find a Position
     * @example
     * // Get one Position
     * const position = await prisma.position.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PositionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PositionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PositionClient<$Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Position that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PositionFindFirstArgs} args - Arguments to find a Position
     * @example
     * // Get one Position
     * const position = await prisma.position.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PositionFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PositionFindFirstArgs<ExtArgs>>
    ): Prisma__PositionClient<$Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Position that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PositionFindFirstOrThrowArgs} args - Arguments to find a Position
     * @example
     * // Get one Position
     * const position = await prisma.position.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PositionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PositionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PositionClient<$Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Positions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PositionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Positions
     * const positions = await prisma.position.findMany()
     * 
     * // Get first 10 Positions
     * const positions = await prisma.position.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const positionWithIdOnly = await prisma.position.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PositionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PositionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Position.
     * @param {PositionCreateArgs} args - Arguments to create a Position.
     * @example
     * // Create one Position
     * const Position = await prisma.position.create({
     *   data: {
     *     // ... data to create a Position
     *   }
     * })
     * 
    **/
    create<T extends PositionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PositionCreateArgs<ExtArgs>>
    ): Prisma__PositionClient<$Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Positions.
     *     @param {PositionCreateManyArgs} args - Arguments to create many Positions.
     *     @example
     *     // Create many Positions
     *     const position = await prisma.position.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PositionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PositionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Position.
     * @param {PositionDeleteArgs} args - Arguments to delete one Position.
     * @example
     * // Delete one Position
     * const Position = await prisma.position.delete({
     *   where: {
     *     // ... filter to delete one Position
     *   }
     * })
     * 
    **/
    delete<T extends PositionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PositionDeleteArgs<ExtArgs>>
    ): Prisma__PositionClient<$Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Position.
     * @param {PositionUpdateArgs} args - Arguments to update one Position.
     * @example
     * // Update one Position
     * const position = await prisma.position.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PositionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PositionUpdateArgs<ExtArgs>>
    ): Prisma__PositionClient<$Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Positions.
     * @param {PositionDeleteManyArgs} args - Arguments to filter Positions to delete.
     * @example
     * // Delete a few Positions
     * const { count } = await prisma.position.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PositionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PositionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Positions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PositionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Positions
     * const position = await prisma.position.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PositionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PositionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Position.
     * @param {PositionUpsertArgs} args - Arguments to update or create a Position.
     * @example
     * // Update or create a Position
     * const position = await prisma.position.upsert({
     *   create: {
     *     // ... data to create a Position
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Position we want to update
     *   }
     * })
    **/
    upsert<T extends PositionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PositionUpsertArgs<ExtArgs>>
    ): Prisma__PositionClient<$Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Positions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PositionCountArgs} args - Arguments to filter Positions to count.
     * @example
     * // Count the number of Positions
     * const count = await prisma.position.count({
     *   where: {
     *     // ... the filter for the Positions we want to count
     *   }
     * })
    **/
    count<T extends PositionCountArgs>(
      args?: Subset<T, PositionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PositionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Position.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PositionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PositionAggregateArgs>(args: Subset<T, PositionAggregateArgs>): Prisma.PrismaPromise<GetPositionAggregateType<T>>

    /**
     * Group by Position.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PositionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PositionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PositionGroupByArgs['orderBy'] }
        : { orderBy?: PositionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PositionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPositionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Position model
   */
  readonly fields: PositionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Position.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PositionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Kahlova_Member<T extends Position$Kahlova_MemberArgs<ExtArgs> = {}>(args?: Subset<T, Position$Kahlova_MemberArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Kahlova_MemberPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Position model
   */ 
  interface PositionFieldRefs {
    readonly id: FieldRef<"Position", 'Int'>
    readonly name: FieldRef<"Position", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Position findUnique
   */
  export type PositionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PositionInclude<ExtArgs> | null
    /**
     * Filter, which Position to fetch.
     */
    where: PositionWhereUniqueInput
  }


  /**
   * Position findUniqueOrThrow
   */
  export type PositionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PositionInclude<ExtArgs> | null
    /**
     * Filter, which Position to fetch.
     */
    where: PositionWhereUniqueInput
  }


  /**
   * Position findFirst
   */
  export type PositionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PositionInclude<ExtArgs> | null
    /**
     * Filter, which Position to fetch.
     */
    where?: PositionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Positions to fetch.
     */
    orderBy?: PositionOrderByWithRelationInput | PositionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Positions.
     */
    cursor?: PositionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Positions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Positions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Positions.
     */
    distinct?: PositionScalarFieldEnum | PositionScalarFieldEnum[]
  }


  /**
   * Position findFirstOrThrow
   */
  export type PositionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PositionInclude<ExtArgs> | null
    /**
     * Filter, which Position to fetch.
     */
    where?: PositionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Positions to fetch.
     */
    orderBy?: PositionOrderByWithRelationInput | PositionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Positions.
     */
    cursor?: PositionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Positions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Positions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Positions.
     */
    distinct?: PositionScalarFieldEnum | PositionScalarFieldEnum[]
  }


  /**
   * Position findMany
   */
  export type PositionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PositionInclude<ExtArgs> | null
    /**
     * Filter, which Positions to fetch.
     */
    where?: PositionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Positions to fetch.
     */
    orderBy?: PositionOrderByWithRelationInput | PositionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Positions.
     */
    cursor?: PositionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Positions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Positions.
     */
    skip?: number
    distinct?: PositionScalarFieldEnum | PositionScalarFieldEnum[]
  }


  /**
   * Position create
   */
  export type PositionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PositionInclude<ExtArgs> | null
    /**
     * The data needed to create a Position.
     */
    data: XOR<PositionCreateInput, PositionUncheckedCreateInput>
  }


  /**
   * Position createMany
   */
  export type PositionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Positions.
     */
    data: PositionCreateManyInput | PositionCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Position update
   */
  export type PositionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PositionInclude<ExtArgs> | null
    /**
     * The data needed to update a Position.
     */
    data: XOR<PositionUpdateInput, PositionUncheckedUpdateInput>
    /**
     * Choose, which Position to update.
     */
    where: PositionWhereUniqueInput
  }


  /**
   * Position updateMany
   */
  export type PositionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Positions.
     */
    data: XOR<PositionUpdateManyMutationInput, PositionUncheckedUpdateManyInput>
    /**
     * Filter which Positions to update
     */
    where?: PositionWhereInput
  }


  /**
   * Position upsert
   */
  export type PositionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PositionInclude<ExtArgs> | null
    /**
     * The filter to search for the Position to update in case it exists.
     */
    where: PositionWhereUniqueInput
    /**
     * In case the Position found by the `where` argument doesn't exist, create a new Position with this data.
     */
    create: XOR<PositionCreateInput, PositionUncheckedCreateInput>
    /**
     * In case the Position was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PositionUpdateInput, PositionUncheckedUpdateInput>
  }


  /**
   * Position delete
   */
  export type PositionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PositionInclude<ExtArgs> | null
    /**
     * Filter which Position to delete.
     */
    where: PositionWhereUniqueInput
  }


  /**
   * Position deleteMany
   */
  export type PositionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Positions to delete
     */
    where?: PositionWhereInput
  }


  /**
   * Position.Kahlova_Member
   */
  export type Position$Kahlova_MemberArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kahlova_Member
     */
    select?: Kahlova_MemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Kahlova_MemberInclude<ExtArgs> | null
    where?: Kahlova_MemberWhereInput
    orderBy?: Kahlova_MemberOrderByWithRelationInput | Kahlova_MemberOrderByWithRelationInput[]
    cursor?: Kahlova_MemberWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Kahlova_MemberScalarFieldEnum | Kahlova_MemberScalarFieldEnum[]
  }


  /**
   * Position without action
   */
  export type PositionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PositionInclude<ExtArgs> | null
  }



  /**
   * Model Kahlova_Member
   */

  export type AggregateKahlova_Member = {
    _count: Kahlova_MemberCountAggregateOutputType | null
    _avg: Kahlova_MemberAvgAggregateOutputType | null
    _sum: Kahlova_MemberSumAggregateOutputType | null
    _min: Kahlova_MemberMinAggregateOutputType | null
    _max: Kahlova_MemberMaxAggregateOutputType | null
  }

  export type Kahlova_MemberAvgAggregateOutputType = {
    id: number | null
    positionid: number | null
  }

  export type Kahlova_MemberSumAggregateOutputType = {
    id: number | null
    positionid: number | null
  }

  export type Kahlova_MemberMinAggregateOutputType = {
    id: number | null
    name: string | null
    password: string | null
    email: string | null
    avatar: string | null
    positionid: number | null
    create_at: Date | null
    isConfirm: boolean | null
    verification_token: string | null
  }

  export type Kahlova_MemberMaxAggregateOutputType = {
    id: number | null
    name: string | null
    password: string | null
    email: string | null
    avatar: string | null
    positionid: number | null
    create_at: Date | null
    isConfirm: boolean | null
    verification_token: string | null
  }

  export type Kahlova_MemberCountAggregateOutputType = {
    id: number
    name: number
    password: number
    email: number
    avatar: number
    positionid: number
    create_at: number
    isConfirm: number
    verification_token: number
    _all: number
  }


  export type Kahlova_MemberAvgAggregateInputType = {
    id?: true
    positionid?: true
  }

  export type Kahlova_MemberSumAggregateInputType = {
    id?: true
    positionid?: true
  }

  export type Kahlova_MemberMinAggregateInputType = {
    id?: true
    name?: true
    password?: true
    email?: true
    avatar?: true
    positionid?: true
    create_at?: true
    isConfirm?: true
    verification_token?: true
  }

  export type Kahlova_MemberMaxAggregateInputType = {
    id?: true
    name?: true
    password?: true
    email?: true
    avatar?: true
    positionid?: true
    create_at?: true
    isConfirm?: true
    verification_token?: true
  }

  export type Kahlova_MemberCountAggregateInputType = {
    id?: true
    name?: true
    password?: true
    email?: true
    avatar?: true
    positionid?: true
    create_at?: true
    isConfirm?: true
    verification_token?: true
    _all?: true
  }

  export type Kahlova_MemberAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Kahlova_Member to aggregate.
     */
    where?: Kahlova_MemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Kahlova_Members to fetch.
     */
    orderBy?: Kahlova_MemberOrderByWithRelationInput | Kahlova_MemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Kahlova_MemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Kahlova_Members from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Kahlova_Members.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Kahlova_Members
    **/
    _count?: true | Kahlova_MemberCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Kahlova_MemberAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Kahlova_MemberSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Kahlova_MemberMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Kahlova_MemberMaxAggregateInputType
  }

  export type GetKahlova_MemberAggregateType<T extends Kahlova_MemberAggregateArgs> = {
        [P in keyof T & keyof AggregateKahlova_Member]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateKahlova_Member[P]>
      : GetScalarType<T[P], AggregateKahlova_Member[P]>
  }




  export type Kahlova_MemberGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Kahlova_MemberWhereInput
    orderBy?: Kahlova_MemberOrderByWithAggregationInput | Kahlova_MemberOrderByWithAggregationInput[]
    by: Kahlova_MemberScalarFieldEnum[] | Kahlova_MemberScalarFieldEnum
    having?: Kahlova_MemberScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Kahlova_MemberCountAggregateInputType | true
    _avg?: Kahlova_MemberAvgAggregateInputType
    _sum?: Kahlova_MemberSumAggregateInputType
    _min?: Kahlova_MemberMinAggregateInputType
    _max?: Kahlova_MemberMaxAggregateInputType
  }

  export type Kahlova_MemberGroupByOutputType = {
    id: number
    name: string | null
    password: string | null
    email: string | null
    avatar: string | null
    positionid: number | null
    create_at: Date
    isConfirm: boolean
    verification_token: string
    _count: Kahlova_MemberCountAggregateOutputType | null
    _avg: Kahlova_MemberAvgAggregateOutputType | null
    _sum: Kahlova_MemberSumAggregateOutputType | null
    _min: Kahlova_MemberMinAggregateOutputType | null
    _max: Kahlova_MemberMaxAggregateOutputType | null
  }

  type GetKahlova_MemberGroupByPayload<T extends Kahlova_MemberGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Kahlova_MemberGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Kahlova_MemberGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Kahlova_MemberGroupByOutputType[P]>
            : GetScalarType<T[P], Kahlova_MemberGroupByOutputType[P]>
        }
      >
    >


  export type Kahlova_MemberSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    password?: boolean
    email?: boolean
    avatar?: boolean
    positionid?: boolean
    create_at?: boolean
    isConfirm?: boolean
    verification_token?: boolean
    Position?: boolean | Kahlova_Member$PositionArgs<ExtArgs>
  }, ExtArgs["result"]["kahlova_Member"]>

  export type Kahlova_MemberSelectScalar = {
    id?: boolean
    name?: boolean
    password?: boolean
    email?: boolean
    avatar?: boolean
    positionid?: boolean
    create_at?: boolean
    isConfirm?: boolean
    verification_token?: boolean
  }

  export type Kahlova_MemberInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Position?: boolean | Kahlova_Member$PositionArgs<ExtArgs>
  }


  export type $Kahlova_MemberPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Kahlova_Member"
    objects: {
      Position: Prisma.$PositionPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string | null
      password: string | null
      email: string | null
      avatar: string | null
      positionid: number | null
      create_at: Date
      isConfirm: boolean
      verification_token: string
    }, ExtArgs["result"]["kahlova_Member"]>
    composites: {}
  }


  type Kahlova_MemberGetPayload<S extends boolean | null | undefined | Kahlova_MemberDefaultArgs> = $Result.GetResult<Prisma.$Kahlova_MemberPayload, S>

  type Kahlova_MemberCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<Kahlova_MemberFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Kahlova_MemberCountAggregateInputType | true
    }

  export interface Kahlova_MemberDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Kahlova_Member'], meta: { name: 'Kahlova_Member' } }
    /**
     * Find zero or one Kahlova_Member that matches the filter.
     * @param {Kahlova_MemberFindUniqueArgs} args - Arguments to find a Kahlova_Member
     * @example
     * // Get one Kahlova_Member
     * const kahlova_Member = await prisma.kahlova_Member.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Kahlova_MemberFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, Kahlova_MemberFindUniqueArgs<ExtArgs>>
    ): Prisma__Kahlova_MemberClient<$Result.GetResult<Prisma.$Kahlova_MemberPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Kahlova_Member that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {Kahlova_MemberFindUniqueOrThrowArgs} args - Arguments to find a Kahlova_Member
     * @example
     * // Get one Kahlova_Member
     * const kahlova_Member = await prisma.kahlova_Member.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends Kahlova_MemberFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Kahlova_MemberFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__Kahlova_MemberClient<$Result.GetResult<Prisma.$Kahlova_MemberPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Kahlova_Member that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Kahlova_MemberFindFirstArgs} args - Arguments to find a Kahlova_Member
     * @example
     * // Get one Kahlova_Member
     * const kahlova_Member = await prisma.kahlova_Member.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Kahlova_MemberFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, Kahlova_MemberFindFirstArgs<ExtArgs>>
    ): Prisma__Kahlova_MemberClient<$Result.GetResult<Prisma.$Kahlova_MemberPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Kahlova_Member that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Kahlova_MemberFindFirstOrThrowArgs} args - Arguments to find a Kahlova_Member
     * @example
     * // Get one Kahlova_Member
     * const kahlova_Member = await prisma.kahlova_Member.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends Kahlova_MemberFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Kahlova_MemberFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__Kahlova_MemberClient<$Result.GetResult<Prisma.$Kahlova_MemberPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Kahlova_Members that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Kahlova_MemberFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Kahlova_Members
     * const kahlova_Members = await prisma.kahlova_Member.findMany()
     * 
     * // Get first 10 Kahlova_Members
     * const kahlova_Members = await prisma.kahlova_Member.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const kahlova_MemberWithIdOnly = await prisma.kahlova_Member.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends Kahlova_MemberFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Kahlova_MemberFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Kahlova_MemberPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Kahlova_Member.
     * @param {Kahlova_MemberCreateArgs} args - Arguments to create a Kahlova_Member.
     * @example
     * // Create one Kahlova_Member
     * const Kahlova_Member = await prisma.kahlova_Member.create({
     *   data: {
     *     // ... data to create a Kahlova_Member
     *   }
     * })
     * 
    **/
    create<T extends Kahlova_MemberCreateArgs<ExtArgs>>(
      args: SelectSubset<T, Kahlova_MemberCreateArgs<ExtArgs>>
    ): Prisma__Kahlova_MemberClient<$Result.GetResult<Prisma.$Kahlova_MemberPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Kahlova_Members.
     *     @param {Kahlova_MemberCreateManyArgs} args - Arguments to create many Kahlova_Members.
     *     @example
     *     // Create many Kahlova_Members
     *     const kahlova_Member = await prisma.kahlova_Member.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends Kahlova_MemberCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Kahlova_MemberCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Kahlova_Member.
     * @param {Kahlova_MemberDeleteArgs} args - Arguments to delete one Kahlova_Member.
     * @example
     * // Delete one Kahlova_Member
     * const Kahlova_Member = await prisma.kahlova_Member.delete({
     *   where: {
     *     // ... filter to delete one Kahlova_Member
     *   }
     * })
     * 
    **/
    delete<T extends Kahlova_MemberDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, Kahlova_MemberDeleteArgs<ExtArgs>>
    ): Prisma__Kahlova_MemberClient<$Result.GetResult<Prisma.$Kahlova_MemberPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Kahlova_Member.
     * @param {Kahlova_MemberUpdateArgs} args - Arguments to update one Kahlova_Member.
     * @example
     * // Update one Kahlova_Member
     * const kahlova_Member = await prisma.kahlova_Member.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Kahlova_MemberUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, Kahlova_MemberUpdateArgs<ExtArgs>>
    ): Prisma__Kahlova_MemberClient<$Result.GetResult<Prisma.$Kahlova_MemberPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Kahlova_Members.
     * @param {Kahlova_MemberDeleteManyArgs} args - Arguments to filter Kahlova_Members to delete.
     * @example
     * // Delete a few Kahlova_Members
     * const { count } = await prisma.kahlova_Member.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Kahlova_MemberDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Kahlova_MemberDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Kahlova_Members.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Kahlova_MemberUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Kahlova_Members
     * const kahlova_Member = await prisma.kahlova_Member.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Kahlova_MemberUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, Kahlova_MemberUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Kahlova_Member.
     * @param {Kahlova_MemberUpsertArgs} args - Arguments to update or create a Kahlova_Member.
     * @example
     * // Update or create a Kahlova_Member
     * const kahlova_Member = await prisma.kahlova_Member.upsert({
     *   create: {
     *     // ... data to create a Kahlova_Member
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Kahlova_Member we want to update
     *   }
     * })
    **/
    upsert<T extends Kahlova_MemberUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, Kahlova_MemberUpsertArgs<ExtArgs>>
    ): Prisma__Kahlova_MemberClient<$Result.GetResult<Prisma.$Kahlova_MemberPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Kahlova_Members.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Kahlova_MemberCountArgs} args - Arguments to filter Kahlova_Members to count.
     * @example
     * // Count the number of Kahlova_Members
     * const count = await prisma.kahlova_Member.count({
     *   where: {
     *     // ... the filter for the Kahlova_Members we want to count
     *   }
     * })
    **/
    count<T extends Kahlova_MemberCountArgs>(
      args?: Subset<T, Kahlova_MemberCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Kahlova_MemberCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Kahlova_Member.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Kahlova_MemberAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Kahlova_MemberAggregateArgs>(args: Subset<T, Kahlova_MemberAggregateArgs>): Prisma.PrismaPromise<GetKahlova_MemberAggregateType<T>>

    /**
     * Group by Kahlova_Member.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Kahlova_MemberGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Kahlova_MemberGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Kahlova_MemberGroupByArgs['orderBy'] }
        : { orderBy?: Kahlova_MemberGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Kahlova_MemberGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKahlova_MemberGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Kahlova_Member model
   */
  readonly fields: Kahlova_MemberFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Kahlova_Member.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Kahlova_MemberClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Position<T extends Kahlova_Member$PositionArgs<ExtArgs> = {}>(args?: Subset<T, Kahlova_Member$PositionArgs<ExtArgs>>): Prisma__PositionClient<$Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Kahlova_Member model
   */ 
  interface Kahlova_MemberFieldRefs {
    readonly id: FieldRef<"Kahlova_Member", 'Int'>
    readonly name: FieldRef<"Kahlova_Member", 'String'>
    readonly password: FieldRef<"Kahlova_Member", 'String'>
    readonly email: FieldRef<"Kahlova_Member", 'String'>
    readonly avatar: FieldRef<"Kahlova_Member", 'String'>
    readonly positionid: FieldRef<"Kahlova_Member", 'Int'>
    readonly create_at: FieldRef<"Kahlova_Member", 'DateTime'>
    readonly isConfirm: FieldRef<"Kahlova_Member", 'Boolean'>
    readonly verification_token: FieldRef<"Kahlova_Member", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Kahlova_Member findUnique
   */
  export type Kahlova_MemberFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kahlova_Member
     */
    select?: Kahlova_MemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Kahlova_MemberInclude<ExtArgs> | null
    /**
     * Filter, which Kahlova_Member to fetch.
     */
    where: Kahlova_MemberWhereUniqueInput
  }


  /**
   * Kahlova_Member findUniqueOrThrow
   */
  export type Kahlova_MemberFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kahlova_Member
     */
    select?: Kahlova_MemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Kahlova_MemberInclude<ExtArgs> | null
    /**
     * Filter, which Kahlova_Member to fetch.
     */
    where: Kahlova_MemberWhereUniqueInput
  }


  /**
   * Kahlova_Member findFirst
   */
  export type Kahlova_MemberFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kahlova_Member
     */
    select?: Kahlova_MemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Kahlova_MemberInclude<ExtArgs> | null
    /**
     * Filter, which Kahlova_Member to fetch.
     */
    where?: Kahlova_MemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Kahlova_Members to fetch.
     */
    orderBy?: Kahlova_MemberOrderByWithRelationInput | Kahlova_MemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Kahlova_Members.
     */
    cursor?: Kahlova_MemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Kahlova_Members from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Kahlova_Members.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Kahlova_Members.
     */
    distinct?: Kahlova_MemberScalarFieldEnum | Kahlova_MemberScalarFieldEnum[]
  }


  /**
   * Kahlova_Member findFirstOrThrow
   */
  export type Kahlova_MemberFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kahlova_Member
     */
    select?: Kahlova_MemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Kahlova_MemberInclude<ExtArgs> | null
    /**
     * Filter, which Kahlova_Member to fetch.
     */
    where?: Kahlova_MemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Kahlova_Members to fetch.
     */
    orderBy?: Kahlova_MemberOrderByWithRelationInput | Kahlova_MemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Kahlova_Members.
     */
    cursor?: Kahlova_MemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Kahlova_Members from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Kahlova_Members.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Kahlova_Members.
     */
    distinct?: Kahlova_MemberScalarFieldEnum | Kahlova_MemberScalarFieldEnum[]
  }


  /**
   * Kahlova_Member findMany
   */
  export type Kahlova_MemberFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kahlova_Member
     */
    select?: Kahlova_MemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Kahlova_MemberInclude<ExtArgs> | null
    /**
     * Filter, which Kahlova_Members to fetch.
     */
    where?: Kahlova_MemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Kahlova_Members to fetch.
     */
    orderBy?: Kahlova_MemberOrderByWithRelationInput | Kahlova_MemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Kahlova_Members.
     */
    cursor?: Kahlova_MemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Kahlova_Members from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Kahlova_Members.
     */
    skip?: number
    distinct?: Kahlova_MemberScalarFieldEnum | Kahlova_MemberScalarFieldEnum[]
  }


  /**
   * Kahlova_Member create
   */
  export type Kahlova_MemberCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kahlova_Member
     */
    select?: Kahlova_MemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Kahlova_MemberInclude<ExtArgs> | null
    /**
     * The data needed to create a Kahlova_Member.
     */
    data: XOR<Kahlova_MemberCreateInput, Kahlova_MemberUncheckedCreateInput>
  }


  /**
   * Kahlova_Member createMany
   */
  export type Kahlova_MemberCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Kahlova_Members.
     */
    data: Kahlova_MemberCreateManyInput | Kahlova_MemberCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Kahlova_Member update
   */
  export type Kahlova_MemberUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kahlova_Member
     */
    select?: Kahlova_MemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Kahlova_MemberInclude<ExtArgs> | null
    /**
     * The data needed to update a Kahlova_Member.
     */
    data: XOR<Kahlova_MemberUpdateInput, Kahlova_MemberUncheckedUpdateInput>
    /**
     * Choose, which Kahlova_Member to update.
     */
    where: Kahlova_MemberWhereUniqueInput
  }


  /**
   * Kahlova_Member updateMany
   */
  export type Kahlova_MemberUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Kahlova_Members.
     */
    data: XOR<Kahlova_MemberUpdateManyMutationInput, Kahlova_MemberUncheckedUpdateManyInput>
    /**
     * Filter which Kahlova_Members to update
     */
    where?: Kahlova_MemberWhereInput
  }


  /**
   * Kahlova_Member upsert
   */
  export type Kahlova_MemberUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kahlova_Member
     */
    select?: Kahlova_MemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Kahlova_MemberInclude<ExtArgs> | null
    /**
     * The filter to search for the Kahlova_Member to update in case it exists.
     */
    where: Kahlova_MemberWhereUniqueInput
    /**
     * In case the Kahlova_Member found by the `where` argument doesn't exist, create a new Kahlova_Member with this data.
     */
    create: XOR<Kahlova_MemberCreateInput, Kahlova_MemberUncheckedCreateInput>
    /**
     * In case the Kahlova_Member was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Kahlova_MemberUpdateInput, Kahlova_MemberUncheckedUpdateInput>
  }


  /**
   * Kahlova_Member delete
   */
  export type Kahlova_MemberDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kahlova_Member
     */
    select?: Kahlova_MemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Kahlova_MemberInclude<ExtArgs> | null
    /**
     * Filter which Kahlova_Member to delete.
     */
    where: Kahlova_MemberWhereUniqueInput
  }


  /**
   * Kahlova_Member deleteMany
   */
  export type Kahlova_MemberDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Kahlova_Members to delete
     */
    where?: Kahlova_MemberWhereInput
  }


  /**
   * Kahlova_Member.Position
   */
  export type Kahlova_Member$PositionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PositionInclude<ExtArgs> | null
    where?: PositionWhereInput
  }


  /**
   * Kahlova_Member without action
   */
  export type Kahlova_MemberDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kahlova_Member
     */
    select?: Kahlova_MemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Kahlova_MemberInclude<ExtArgs> | null
  }



  /**
   * Model Kahlova_Project
   */

  export type AggregateKahlova_Project = {
    _count: Kahlova_ProjectCountAggregateOutputType | null
    _min: Kahlova_ProjectMinAggregateOutputType | null
    _max: Kahlova_ProjectMaxAggregateOutputType | null
  }

  export type Kahlova_ProjectMinAggregateOutputType = {
    id: string | null
    name: string | null
    bio: string | null
    categori: string | null
  }

  export type Kahlova_ProjectMaxAggregateOutputType = {
    id: string | null
    name: string | null
    bio: string | null
    categori: string | null
  }

  export type Kahlova_ProjectCountAggregateOutputType = {
    id: number
    name: number
    bio: number
    categori: number
    project_picture: number
    techmade: number
    _all: number
  }


  export type Kahlova_ProjectMinAggregateInputType = {
    id?: true
    name?: true
    bio?: true
    categori?: true
  }

  export type Kahlova_ProjectMaxAggregateInputType = {
    id?: true
    name?: true
    bio?: true
    categori?: true
  }

  export type Kahlova_ProjectCountAggregateInputType = {
    id?: true
    name?: true
    bio?: true
    categori?: true
    project_picture?: true
    techmade?: true
    _all?: true
  }

  export type Kahlova_ProjectAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Kahlova_Project to aggregate.
     */
    where?: Kahlova_ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Kahlova_Projects to fetch.
     */
    orderBy?: Kahlova_ProjectOrderByWithRelationInput | Kahlova_ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Kahlova_ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Kahlova_Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Kahlova_Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Kahlova_Projects
    **/
    _count?: true | Kahlova_ProjectCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Kahlova_ProjectMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Kahlova_ProjectMaxAggregateInputType
  }

  export type GetKahlova_ProjectAggregateType<T extends Kahlova_ProjectAggregateArgs> = {
        [P in keyof T & keyof AggregateKahlova_Project]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateKahlova_Project[P]>
      : GetScalarType<T[P], AggregateKahlova_Project[P]>
  }




  export type Kahlova_ProjectGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Kahlova_ProjectWhereInput
    orderBy?: Kahlova_ProjectOrderByWithAggregationInput | Kahlova_ProjectOrderByWithAggregationInput[]
    by: Kahlova_ProjectScalarFieldEnum[] | Kahlova_ProjectScalarFieldEnum
    having?: Kahlova_ProjectScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Kahlova_ProjectCountAggregateInputType | true
    _min?: Kahlova_ProjectMinAggregateInputType
    _max?: Kahlova_ProjectMaxAggregateInputType
  }

  export type Kahlova_ProjectGroupByOutputType = {
    id: string
    name: string
    bio: string
    categori: string
    project_picture: string[]
    techmade: string[]
    _count: Kahlova_ProjectCountAggregateOutputType | null
    _min: Kahlova_ProjectMinAggregateOutputType | null
    _max: Kahlova_ProjectMaxAggregateOutputType | null
  }

  type GetKahlova_ProjectGroupByPayload<T extends Kahlova_ProjectGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Kahlova_ProjectGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Kahlova_ProjectGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Kahlova_ProjectGroupByOutputType[P]>
            : GetScalarType<T[P], Kahlova_ProjectGroupByOutputType[P]>
        }
      >
    >


  export type Kahlova_ProjectSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    bio?: boolean
    categori?: boolean
    project_picture?: boolean
    techmade?: boolean
    categories?: boolean | Project_CategoriDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["kahlova_Project"]>

  export type Kahlova_ProjectSelectScalar = {
    id?: boolean
    name?: boolean
    bio?: boolean
    categori?: boolean
    project_picture?: boolean
    techmade?: boolean
  }

  export type Kahlova_ProjectInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    categories?: boolean | Project_CategoriDefaultArgs<ExtArgs>
  }


  export type $Kahlova_ProjectPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Kahlova_Project"
    objects: {
      categories: Prisma.$Project_CategoriPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      bio: string
      categori: string
      project_picture: string[]
      techmade: string[]
    }, ExtArgs["result"]["kahlova_Project"]>
    composites: {}
  }


  type Kahlova_ProjectGetPayload<S extends boolean | null | undefined | Kahlova_ProjectDefaultArgs> = $Result.GetResult<Prisma.$Kahlova_ProjectPayload, S>

  type Kahlova_ProjectCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<Kahlova_ProjectFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Kahlova_ProjectCountAggregateInputType | true
    }

  export interface Kahlova_ProjectDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Kahlova_Project'], meta: { name: 'Kahlova_Project' } }
    /**
     * Find zero or one Kahlova_Project that matches the filter.
     * @param {Kahlova_ProjectFindUniqueArgs} args - Arguments to find a Kahlova_Project
     * @example
     * // Get one Kahlova_Project
     * const kahlova_Project = await prisma.kahlova_Project.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Kahlova_ProjectFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, Kahlova_ProjectFindUniqueArgs<ExtArgs>>
    ): Prisma__Kahlova_ProjectClient<$Result.GetResult<Prisma.$Kahlova_ProjectPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Kahlova_Project that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {Kahlova_ProjectFindUniqueOrThrowArgs} args - Arguments to find a Kahlova_Project
     * @example
     * // Get one Kahlova_Project
     * const kahlova_Project = await prisma.kahlova_Project.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends Kahlova_ProjectFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Kahlova_ProjectFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__Kahlova_ProjectClient<$Result.GetResult<Prisma.$Kahlova_ProjectPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Kahlova_Project that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Kahlova_ProjectFindFirstArgs} args - Arguments to find a Kahlova_Project
     * @example
     * // Get one Kahlova_Project
     * const kahlova_Project = await prisma.kahlova_Project.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Kahlova_ProjectFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, Kahlova_ProjectFindFirstArgs<ExtArgs>>
    ): Prisma__Kahlova_ProjectClient<$Result.GetResult<Prisma.$Kahlova_ProjectPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Kahlova_Project that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Kahlova_ProjectFindFirstOrThrowArgs} args - Arguments to find a Kahlova_Project
     * @example
     * // Get one Kahlova_Project
     * const kahlova_Project = await prisma.kahlova_Project.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends Kahlova_ProjectFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Kahlova_ProjectFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__Kahlova_ProjectClient<$Result.GetResult<Prisma.$Kahlova_ProjectPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Kahlova_Projects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Kahlova_ProjectFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Kahlova_Projects
     * const kahlova_Projects = await prisma.kahlova_Project.findMany()
     * 
     * // Get first 10 Kahlova_Projects
     * const kahlova_Projects = await prisma.kahlova_Project.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const kahlova_ProjectWithIdOnly = await prisma.kahlova_Project.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends Kahlova_ProjectFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Kahlova_ProjectFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Kahlova_ProjectPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Kahlova_Project.
     * @param {Kahlova_ProjectCreateArgs} args - Arguments to create a Kahlova_Project.
     * @example
     * // Create one Kahlova_Project
     * const Kahlova_Project = await prisma.kahlova_Project.create({
     *   data: {
     *     // ... data to create a Kahlova_Project
     *   }
     * })
     * 
    **/
    create<T extends Kahlova_ProjectCreateArgs<ExtArgs>>(
      args: SelectSubset<T, Kahlova_ProjectCreateArgs<ExtArgs>>
    ): Prisma__Kahlova_ProjectClient<$Result.GetResult<Prisma.$Kahlova_ProjectPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Kahlova_Projects.
     *     @param {Kahlova_ProjectCreateManyArgs} args - Arguments to create many Kahlova_Projects.
     *     @example
     *     // Create many Kahlova_Projects
     *     const kahlova_Project = await prisma.kahlova_Project.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends Kahlova_ProjectCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Kahlova_ProjectCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Kahlova_Project.
     * @param {Kahlova_ProjectDeleteArgs} args - Arguments to delete one Kahlova_Project.
     * @example
     * // Delete one Kahlova_Project
     * const Kahlova_Project = await prisma.kahlova_Project.delete({
     *   where: {
     *     // ... filter to delete one Kahlova_Project
     *   }
     * })
     * 
    **/
    delete<T extends Kahlova_ProjectDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, Kahlova_ProjectDeleteArgs<ExtArgs>>
    ): Prisma__Kahlova_ProjectClient<$Result.GetResult<Prisma.$Kahlova_ProjectPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Kahlova_Project.
     * @param {Kahlova_ProjectUpdateArgs} args - Arguments to update one Kahlova_Project.
     * @example
     * // Update one Kahlova_Project
     * const kahlova_Project = await prisma.kahlova_Project.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Kahlova_ProjectUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, Kahlova_ProjectUpdateArgs<ExtArgs>>
    ): Prisma__Kahlova_ProjectClient<$Result.GetResult<Prisma.$Kahlova_ProjectPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Kahlova_Projects.
     * @param {Kahlova_ProjectDeleteManyArgs} args - Arguments to filter Kahlova_Projects to delete.
     * @example
     * // Delete a few Kahlova_Projects
     * const { count } = await prisma.kahlova_Project.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Kahlova_ProjectDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Kahlova_ProjectDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Kahlova_Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Kahlova_ProjectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Kahlova_Projects
     * const kahlova_Project = await prisma.kahlova_Project.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Kahlova_ProjectUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, Kahlova_ProjectUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Kahlova_Project.
     * @param {Kahlova_ProjectUpsertArgs} args - Arguments to update or create a Kahlova_Project.
     * @example
     * // Update or create a Kahlova_Project
     * const kahlova_Project = await prisma.kahlova_Project.upsert({
     *   create: {
     *     // ... data to create a Kahlova_Project
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Kahlova_Project we want to update
     *   }
     * })
    **/
    upsert<T extends Kahlova_ProjectUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, Kahlova_ProjectUpsertArgs<ExtArgs>>
    ): Prisma__Kahlova_ProjectClient<$Result.GetResult<Prisma.$Kahlova_ProjectPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Kahlova_Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Kahlova_ProjectCountArgs} args - Arguments to filter Kahlova_Projects to count.
     * @example
     * // Count the number of Kahlova_Projects
     * const count = await prisma.kahlova_Project.count({
     *   where: {
     *     // ... the filter for the Kahlova_Projects we want to count
     *   }
     * })
    **/
    count<T extends Kahlova_ProjectCountArgs>(
      args?: Subset<T, Kahlova_ProjectCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Kahlova_ProjectCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Kahlova_Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Kahlova_ProjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Kahlova_ProjectAggregateArgs>(args: Subset<T, Kahlova_ProjectAggregateArgs>): Prisma.PrismaPromise<GetKahlova_ProjectAggregateType<T>>

    /**
     * Group by Kahlova_Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Kahlova_ProjectGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Kahlova_ProjectGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Kahlova_ProjectGroupByArgs['orderBy'] }
        : { orderBy?: Kahlova_ProjectGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Kahlova_ProjectGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKahlova_ProjectGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Kahlova_Project model
   */
  readonly fields: Kahlova_ProjectFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Kahlova_Project.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Kahlova_ProjectClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    categories<T extends Project_CategoriDefaultArgs<ExtArgs> = {}>(args?: Subset<T, Project_CategoriDefaultArgs<ExtArgs>>): Prisma__Project_CategoriClient<$Result.GetResult<Prisma.$Project_CategoriPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Kahlova_Project model
   */ 
  interface Kahlova_ProjectFieldRefs {
    readonly id: FieldRef<"Kahlova_Project", 'String'>
    readonly name: FieldRef<"Kahlova_Project", 'String'>
    readonly bio: FieldRef<"Kahlova_Project", 'String'>
    readonly categori: FieldRef<"Kahlova_Project", 'String'>
    readonly project_picture: FieldRef<"Kahlova_Project", 'String[]'>
    readonly techmade: FieldRef<"Kahlova_Project", 'String[]'>
  }
    

  // Custom InputTypes

  /**
   * Kahlova_Project findUnique
   */
  export type Kahlova_ProjectFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kahlova_Project
     */
    select?: Kahlova_ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Kahlova_ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Kahlova_Project to fetch.
     */
    where: Kahlova_ProjectWhereUniqueInput
  }


  /**
   * Kahlova_Project findUniqueOrThrow
   */
  export type Kahlova_ProjectFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kahlova_Project
     */
    select?: Kahlova_ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Kahlova_ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Kahlova_Project to fetch.
     */
    where: Kahlova_ProjectWhereUniqueInput
  }


  /**
   * Kahlova_Project findFirst
   */
  export type Kahlova_ProjectFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kahlova_Project
     */
    select?: Kahlova_ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Kahlova_ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Kahlova_Project to fetch.
     */
    where?: Kahlova_ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Kahlova_Projects to fetch.
     */
    orderBy?: Kahlova_ProjectOrderByWithRelationInput | Kahlova_ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Kahlova_Projects.
     */
    cursor?: Kahlova_ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Kahlova_Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Kahlova_Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Kahlova_Projects.
     */
    distinct?: Kahlova_ProjectScalarFieldEnum | Kahlova_ProjectScalarFieldEnum[]
  }


  /**
   * Kahlova_Project findFirstOrThrow
   */
  export type Kahlova_ProjectFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kahlova_Project
     */
    select?: Kahlova_ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Kahlova_ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Kahlova_Project to fetch.
     */
    where?: Kahlova_ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Kahlova_Projects to fetch.
     */
    orderBy?: Kahlova_ProjectOrderByWithRelationInput | Kahlova_ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Kahlova_Projects.
     */
    cursor?: Kahlova_ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Kahlova_Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Kahlova_Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Kahlova_Projects.
     */
    distinct?: Kahlova_ProjectScalarFieldEnum | Kahlova_ProjectScalarFieldEnum[]
  }


  /**
   * Kahlova_Project findMany
   */
  export type Kahlova_ProjectFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kahlova_Project
     */
    select?: Kahlova_ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Kahlova_ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Kahlova_Projects to fetch.
     */
    where?: Kahlova_ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Kahlova_Projects to fetch.
     */
    orderBy?: Kahlova_ProjectOrderByWithRelationInput | Kahlova_ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Kahlova_Projects.
     */
    cursor?: Kahlova_ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Kahlova_Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Kahlova_Projects.
     */
    skip?: number
    distinct?: Kahlova_ProjectScalarFieldEnum | Kahlova_ProjectScalarFieldEnum[]
  }


  /**
   * Kahlova_Project create
   */
  export type Kahlova_ProjectCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kahlova_Project
     */
    select?: Kahlova_ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Kahlova_ProjectInclude<ExtArgs> | null
    /**
     * The data needed to create a Kahlova_Project.
     */
    data: XOR<Kahlova_ProjectCreateInput, Kahlova_ProjectUncheckedCreateInput>
  }


  /**
   * Kahlova_Project createMany
   */
  export type Kahlova_ProjectCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Kahlova_Projects.
     */
    data: Kahlova_ProjectCreateManyInput | Kahlova_ProjectCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Kahlova_Project update
   */
  export type Kahlova_ProjectUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kahlova_Project
     */
    select?: Kahlova_ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Kahlova_ProjectInclude<ExtArgs> | null
    /**
     * The data needed to update a Kahlova_Project.
     */
    data: XOR<Kahlova_ProjectUpdateInput, Kahlova_ProjectUncheckedUpdateInput>
    /**
     * Choose, which Kahlova_Project to update.
     */
    where: Kahlova_ProjectWhereUniqueInput
  }


  /**
   * Kahlova_Project updateMany
   */
  export type Kahlova_ProjectUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Kahlova_Projects.
     */
    data: XOR<Kahlova_ProjectUpdateManyMutationInput, Kahlova_ProjectUncheckedUpdateManyInput>
    /**
     * Filter which Kahlova_Projects to update
     */
    where?: Kahlova_ProjectWhereInput
  }


  /**
   * Kahlova_Project upsert
   */
  export type Kahlova_ProjectUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kahlova_Project
     */
    select?: Kahlova_ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Kahlova_ProjectInclude<ExtArgs> | null
    /**
     * The filter to search for the Kahlova_Project to update in case it exists.
     */
    where: Kahlova_ProjectWhereUniqueInput
    /**
     * In case the Kahlova_Project found by the `where` argument doesn't exist, create a new Kahlova_Project with this data.
     */
    create: XOR<Kahlova_ProjectCreateInput, Kahlova_ProjectUncheckedCreateInput>
    /**
     * In case the Kahlova_Project was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Kahlova_ProjectUpdateInput, Kahlova_ProjectUncheckedUpdateInput>
  }


  /**
   * Kahlova_Project delete
   */
  export type Kahlova_ProjectDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kahlova_Project
     */
    select?: Kahlova_ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Kahlova_ProjectInclude<ExtArgs> | null
    /**
     * Filter which Kahlova_Project to delete.
     */
    where: Kahlova_ProjectWhereUniqueInput
  }


  /**
   * Kahlova_Project deleteMany
   */
  export type Kahlova_ProjectDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Kahlova_Projects to delete
     */
    where?: Kahlova_ProjectWhereInput
  }


  /**
   * Kahlova_Project without action
   */
  export type Kahlova_ProjectDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kahlova_Project
     */
    select?: Kahlova_ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Kahlova_ProjectInclude<ExtArgs> | null
  }



  /**
   * Model Project_Categori
   */

  export type AggregateProject_Categori = {
    _count: Project_CategoriCountAggregateOutputType | null
    _min: Project_CategoriMinAggregateOutputType | null
    _max: Project_CategoriMaxAggregateOutputType | null
  }

  export type Project_CategoriMinAggregateOutputType = {
    name: string | null
  }

  export type Project_CategoriMaxAggregateOutputType = {
    name: string | null
  }

  export type Project_CategoriCountAggregateOutputType = {
    name: number
    _all: number
  }


  export type Project_CategoriMinAggregateInputType = {
    name?: true
  }

  export type Project_CategoriMaxAggregateInputType = {
    name?: true
  }

  export type Project_CategoriCountAggregateInputType = {
    name?: true
    _all?: true
  }

  export type Project_CategoriAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Project_Categori to aggregate.
     */
    where?: Project_CategoriWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Project_Categoris to fetch.
     */
    orderBy?: Project_CategoriOrderByWithRelationInput | Project_CategoriOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Project_CategoriWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Project_Categoris from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Project_Categoris.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Project_Categoris
    **/
    _count?: true | Project_CategoriCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Project_CategoriMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Project_CategoriMaxAggregateInputType
  }

  export type GetProject_CategoriAggregateType<T extends Project_CategoriAggregateArgs> = {
        [P in keyof T & keyof AggregateProject_Categori]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProject_Categori[P]>
      : GetScalarType<T[P], AggregateProject_Categori[P]>
  }




  export type Project_CategoriGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Project_CategoriWhereInput
    orderBy?: Project_CategoriOrderByWithAggregationInput | Project_CategoriOrderByWithAggregationInput[]
    by: Project_CategoriScalarFieldEnum[] | Project_CategoriScalarFieldEnum
    having?: Project_CategoriScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Project_CategoriCountAggregateInputType | true
    _min?: Project_CategoriMinAggregateInputType
    _max?: Project_CategoriMaxAggregateInputType
  }

  export type Project_CategoriGroupByOutputType = {
    name: string
    _count: Project_CategoriCountAggregateOutputType | null
    _min: Project_CategoriMinAggregateOutputType | null
    _max: Project_CategoriMaxAggregateOutputType | null
  }

  type GetProject_CategoriGroupByPayload<T extends Project_CategoriGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Project_CategoriGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Project_CategoriGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Project_CategoriGroupByOutputType[P]>
            : GetScalarType<T[P], Project_CategoriGroupByOutputType[P]>
        }
      >
    >


  export type Project_CategoriSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    name?: boolean
    Kahlova_Project?: boolean | Project_Categori$Kahlova_ProjectArgs<ExtArgs>
    _count?: boolean | Project_CategoriCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["project_Categori"]>

  export type Project_CategoriSelectScalar = {
    name?: boolean
  }

  export type Project_CategoriInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Kahlova_Project?: boolean | Project_Categori$Kahlova_ProjectArgs<ExtArgs>
    _count?: boolean | Project_CategoriCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $Project_CategoriPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Project_Categori"
    objects: {
      Kahlova_Project: Prisma.$Kahlova_ProjectPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      name: string
    }, ExtArgs["result"]["project_Categori"]>
    composites: {}
  }


  type Project_CategoriGetPayload<S extends boolean | null | undefined | Project_CategoriDefaultArgs> = $Result.GetResult<Prisma.$Project_CategoriPayload, S>

  type Project_CategoriCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<Project_CategoriFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Project_CategoriCountAggregateInputType | true
    }

  export interface Project_CategoriDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Project_Categori'], meta: { name: 'Project_Categori' } }
    /**
     * Find zero or one Project_Categori that matches the filter.
     * @param {Project_CategoriFindUniqueArgs} args - Arguments to find a Project_Categori
     * @example
     * // Get one Project_Categori
     * const project_Categori = await prisma.project_Categori.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Project_CategoriFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, Project_CategoriFindUniqueArgs<ExtArgs>>
    ): Prisma__Project_CategoriClient<$Result.GetResult<Prisma.$Project_CategoriPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Project_Categori that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {Project_CategoriFindUniqueOrThrowArgs} args - Arguments to find a Project_Categori
     * @example
     * // Get one Project_Categori
     * const project_Categori = await prisma.project_Categori.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends Project_CategoriFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Project_CategoriFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__Project_CategoriClient<$Result.GetResult<Prisma.$Project_CategoriPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Project_Categori that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Project_CategoriFindFirstArgs} args - Arguments to find a Project_Categori
     * @example
     * // Get one Project_Categori
     * const project_Categori = await prisma.project_Categori.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Project_CategoriFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, Project_CategoriFindFirstArgs<ExtArgs>>
    ): Prisma__Project_CategoriClient<$Result.GetResult<Prisma.$Project_CategoriPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Project_Categori that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Project_CategoriFindFirstOrThrowArgs} args - Arguments to find a Project_Categori
     * @example
     * // Get one Project_Categori
     * const project_Categori = await prisma.project_Categori.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends Project_CategoriFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Project_CategoriFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__Project_CategoriClient<$Result.GetResult<Prisma.$Project_CategoriPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Project_Categoris that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Project_CategoriFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Project_Categoris
     * const project_Categoris = await prisma.project_Categori.findMany()
     * 
     * // Get first 10 Project_Categoris
     * const project_Categoris = await prisma.project_Categori.findMany({ take: 10 })
     * 
     * // Only select the `name`
     * const project_CategoriWithNameOnly = await prisma.project_Categori.findMany({ select: { name: true } })
     * 
    **/
    findMany<T extends Project_CategoriFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Project_CategoriFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Project_CategoriPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Project_Categori.
     * @param {Project_CategoriCreateArgs} args - Arguments to create a Project_Categori.
     * @example
     * // Create one Project_Categori
     * const Project_Categori = await prisma.project_Categori.create({
     *   data: {
     *     // ... data to create a Project_Categori
     *   }
     * })
     * 
    **/
    create<T extends Project_CategoriCreateArgs<ExtArgs>>(
      args: SelectSubset<T, Project_CategoriCreateArgs<ExtArgs>>
    ): Prisma__Project_CategoriClient<$Result.GetResult<Prisma.$Project_CategoriPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Project_Categoris.
     *     @param {Project_CategoriCreateManyArgs} args - Arguments to create many Project_Categoris.
     *     @example
     *     // Create many Project_Categoris
     *     const project_Categori = await prisma.project_Categori.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends Project_CategoriCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Project_CategoriCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Project_Categori.
     * @param {Project_CategoriDeleteArgs} args - Arguments to delete one Project_Categori.
     * @example
     * // Delete one Project_Categori
     * const Project_Categori = await prisma.project_Categori.delete({
     *   where: {
     *     // ... filter to delete one Project_Categori
     *   }
     * })
     * 
    **/
    delete<T extends Project_CategoriDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, Project_CategoriDeleteArgs<ExtArgs>>
    ): Prisma__Project_CategoriClient<$Result.GetResult<Prisma.$Project_CategoriPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Project_Categori.
     * @param {Project_CategoriUpdateArgs} args - Arguments to update one Project_Categori.
     * @example
     * // Update one Project_Categori
     * const project_Categori = await prisma.project_Categori.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Project_CategoriUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, Project_CategoriUpdateArgs<ExtArgs>>
    ): Prisma__Project_CategoriClient<$Result.GetResult<Prisma.$Project_CategoriPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Project_Categoris.
     * @param {Project_CategoriDeleteManyArgs} args - Arguments to filter Project_Categoris to delete.
     * @example
     * // Delete a few Project_Categoris
     * const { count } = await prisma.project_Categori.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Project_CategoriDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Project_CategoriDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Project_Categoris.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Project_CategoriUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Project_Categoris
     * const project_Categori = await prisma.project_Categori.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Project_CategoriUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, Project_CategoriUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Project_Categori.
     * @param {Project_CategoriUpsertArgs} args - Arguments to update or create a Project_Categori.
     * @example
     * // Update or create a Project_Categori
     * const project_Categori = await prisma.project_Categori.upsert({
     *   create: {
     *     // ... data to create a Project_Categori
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Project_Categori we want to update
     *   }
     * })
    **/
    upsert<T extends Project_CategoriUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, Project_CategoriUpsertArgs<ExtArgs>>
    ): Prisma__Project_CategoriClient<$Result.GetResult<Prisma.$Project_CategoriPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Project_Categoris.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Project_CategoriCountArgs} args - Arguments to filter Project_Categoris to count.
     * @example
     * // Count the number of Project_Categoris
     * const count = await prisma.project_Categori.count({
     *   where: {
     *     // ... the filter for the Project_Categoris we want to count
     *   }
     * })
    **/
    count<T extends Project_CategoriCountArgs>(
      args?: Subset<T, Project_CategoriCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Project_CategoriCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Project_Categori.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Project_CategoriAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Project_CategoriAggregateArgs>(args: Subset<T, Project_CategoriAggregateArgs>): Prisma.PrismaPromise<GetProject_CategoriAggregateType<T>>

    /**
     * Group by Project_Categori.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Project_CategoriGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Project_CategoriGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Project_CategoriGroupByArgs['orderBy'] }
        : { orderBy?: Project_CategoriGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Project_CategoriGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProject_CategoriGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Project_Categori model
   */
  readonly fields: Project_CategoriFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Project_Categori.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Project_CategoriClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Kahlova_Project<T extends Project_Categori$Kahlova_ProjectArgs<ExtArgs> = {}>(args?: Subset<T, Project_Categori$Kahlova_ProjectArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Kahlova_ProjectPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Project_Categori model
   */ 
  interface Project_CategoriFieldRefs {
    readonly name: FieldRef<"Project_Categori", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Project_Categori findUnique
   */
  export type Project_CategoriFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project_Categori
     */
    select?: Project_CategoriSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Project_CategoriInclude<ExtArgs> | null
    /**
     * Filter, which Project_Categori to fetch.
     */
    where: Project_CategoriWhereUniqueInput
  }


  /**
   * Project_Categori findUniqueOrThrow
   */
  export type Project_CategoriFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project_Categori
     */
    select?: Project_CategoriSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Project_CategoriInclude<ExtArgs> | null
    /**
     * Filter, which Project_Categori to fetch.
     */
    where: Project_CategoriWhereUniqueInput
  }


  /**
   * Project_Categori findFirst
   */
  export type Project_CategoriFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project_Categori
     */
    select?: Project_CategoriSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Project_CategoriInclude<ExtArgs> | null
    /**
     * Filter, which Project_Categori to fetch.
     */
    where?: Project_CategoriWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Project_Categoris to fetch.
     */
    orderBy?: Project_CategoriOrderByWithRelationInput | Project_CategoriOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Project_Categoris.
     */
    cursor?: Project_CategoriWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Project_Categoris from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Project_Categoris.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Project_Categoris.
     */
    distinct?: Project_CategoriScalarFieldEnum | Project_CategoriScalarFieldEnum[]
  }


  /**
   * Project_Categori findFirstOrThrow
   */
  export type Project_CategoriFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project_Categori
     */
    select?: Project_CategoriSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Project_CategoriInclude<ExtArgs> | null
    /**
     * Filter, which Project_Categori to fetch.
     */
    where?: Project_CategoriWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Project_Categoris to fetch.
     */
    orderBy?: Project_CategoriOrderByWithRelationInput | Project_CategoriOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Project_Categoris.
     */
    cursor?: Project_CategoriWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Project_Categoris from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Project_Categoris.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Project_Categoris.
     */
    distinct?: Project_CategoriScalarFieldEnum | Project_CategoriScalarFieldEnum[]
  }


  /**
   * Project_Categori findMany
   */
  export type Project_CategoriFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project_Categori
     */
    select?: Project_CategoriSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Project_CategoriInclude<ExtArgs> | null
    /**
     * Filter, which Project_Categoris to fetch.
     */
    where?: Project_CategoriWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Project_Categoris to fetch.
     */
    orderBy?: Project_CategoriOrderByWithRelationInput | Project_CategoriOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Project_Categoris.
     */
    cursor?: Project_CategoriWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Project_Categoris from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Project_Categoris.
     */
    skip?: number
    distinct?: Project_CategoriScalarFieldEnum | Project_CategoriScalarFieldEnum[]
  }


  /**
   * Project_Categori create
   */
  export type Project_CategoriCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project_Categori
     */
    select?: Project_CategoriSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Project_CategoriInclude<ExtArgs> | null
    /**
     * The data needed to create a Project_Categori.
     */
    data: XOR<Project_CategoriCreateInput, Project_CategoriUncheckedCreateInput>
  }


  /**
   * Project_Categori createMany
   */
  export type Project_CategoriCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Project_Categoris.
     */
    data: Project_CategoriCreateManyInput | Project_CategoriCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Project_Categori update
   */
  export type Project_CategoriUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project_Categori
     */
    select?: Project_CategoriSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Project_CategoriInclude<ExtArgs> | null
    /**
     * The data needed to update a Project_Categori.
     */
    data: XOR<Project_CategoriUpdateInput, Project_CategoriUncheckedUpdateInput>
    /**
     * Choose, which Project_Categori to update.
     */
    where: Project_CategoriWhereUniqueInput
  }


  /**
   * Project_Categori updateMany
   */
  export type Project_CategoriUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Project_Categoris.
     */
    data: XOR<Project_CategoriUpdateManyMutationInput, Project_CategoriUncheckedUpdateManyInput>
    /**
     * Filter which Project_Categoris to update
     */
    where?: Project_CategoriWhereInput
  }


  /**
   * Project_Categori upsert
   */
  export type Project_CategoriUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project_Categori
     */
    select?: Project_CategoriSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Project_CategoriInclude<ExtArgs> | null
    /**
     * The filter to search for the Project_Categori to update in case it exists.
     */
    where: Project_CategoriWhereUniqueInput
    /**
     * In case the Project_Categori found by the `where` argument doesn't exist, create a new Project_Categori with this data.
     */
    create: XOR<Project_CategoriCreateInput, Project_CategoriUncheckedCreateInput>
    /**
     * In case the Project_Categori was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Project_CategoriUpdateInput, Project_CategoriUncheckedUpdateInput>
  }


  /**
   * Project_Categori delete
   */
  export type Project_CategoriDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project_Categori
     */
    select?: Project_CategoriSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Project_CategoriInclude<ExtArgs> | null
    /**
     * Filter which Project_Categori to delete.
     */
    where: Project_CategoriWhereUniqueInput
  }


  /**
   * Project_Categori deleteMany
   */
  export type Project_CategoriDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Project_Categoris to delete
     */
    where?: Project_CategoriWhereInput
  }


  /**
   * Project_Categori.Kahlova_Project
   */
  export type Project_Categori$Kahlova_ProjectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kahlova_Project
     */
    select?: Kahlova_ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Kahlova_ProjectInclude<ExtArgs> | null
    where?: Kahlova_ProjectWhereInput
    orderBy?: Kahlova_ProjectOrderByWithRelationInput | Kahlova_ProjectOrderByWithRelationInput[]
    cursor?: Kahlova_ProjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Kahlova_ProjectScalarFieldEnum | Kahlova_ProjectScalarFieldEnum[]
  }


  /**
   * Project_Categori without action
   */
  export type Project_CategoriDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project_Categori
     */
    select?: Project_CategoriSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Project_CategoriInclude<ExtArgs> | null
  }



  /**
   * Model images
   */

  export type AggregateImages = {
    _count: ImagesCountAggregateOutputType | null
    _min: ImagesMinAggregateOutputType | null
    _max: ImagesMaxAggregateOutputType | null
  }

  export type ImagesMinAggregateOutputType = {
    id: string | null
    data: Buffer | null
    name: string | null
  }

  export type ImagesMaxAggregateOutputType = {
    id: string | null
    data: Buffer | null
    name: string | null
  }

  export type ImagesCountAggregateOutputType = {
    id: number
    data: number
    name: number
    _all: number
  }


  export type ImagesMinAggregateInputType = {
    id?: true
    data?: true
    name?: true
  }

  export type ImagesMaxAggregateInputType = {
    id?: true
    data?: true
    name?: true
  }

  export type ImagesCountAggregateInputType = {
    id?: true
    data?: true
    name?: true
    _all?: true
  }

  export type ImagesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which images to aggregate.
     */
    where?: imagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of images to fetch.
     */
    orderBy?: imagesOrderByWithRelationInput | imagesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: imagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned images
    **/
    _count?: true | ImagesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ImagesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ImagesMaxAggregateInputType
  }

  export type GetImagesAggregateType<T extends ImagesAggregateArgs> = {
        [P in keyof T & keyof AggregateImages]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateImages[P]>
      : GetScalarType<T[P], AggregateImages[P]>
  }




  export type imagesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: imagesWhereInput
    orderBy?: imagesOrderByWithAggregationInput | imagesOrderByWithAggregationInput[]
    by: ImagesScalarFieldEnum[] | ImagesScalarFieldEnum
    having?: imagesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ImagesCountAggregateInputType | true
    _min?: ImagesMinAggregateInputType
    _max?: ImagesMaxAggregateInputType
  }

  export type ImagesGroupByOutputType = {
    id: string
    data: Buffer
    name: string
    _count: ImagesCountAggregateOutputType | null
    _min: ImagesMinAggregateOutputType | null
    _max: ImagesMaxAggregateOutputType | null
  }

  type GetImagesGroupByPayload<T extends imagesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ImagesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ImagesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ImagesGroupByOutputType[P]>
            : GetScalarType<T[P], ImagesGroupByOutputType[P]>
        }
      >
    >


  export type imagesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    data?: boolean
    name?: boolean
  }, ExtArgs["result"]["images"]>

  export type imagesSelectScalar = {
    id?: boolean
    data?: boolean
    name?: boolean
  }


  export type $imagesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "images"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      data: Buffer
      name: string
    }, ExtArgs["result"]["images"]>
    composites: {}
  }


  type imagesGetPayload<S extends boolean | null | undefined | imagesDefaultArgs> = $Result.GetResult<Prisma.$imagesPayload, S>

  type imagesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<imagesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ImagesCountAggregateInputType | true
    }

  export interface imagesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['images'], meta: { name: 'images' } }
    /**
     * Find zero or one Images that matches the filter.
     * @param {imagesFindUniqueArgs} args - Arguments to find a Images
     * @example
     * // Get one Images
     * const images = await prisma.images.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends imagesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, imagesFindUniqueArgs<ExtArgs>>
    ): Prisma__imagesClient<$Result.GetResult<Prisma.$imagesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Images that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {imagesFindUniqueOrThrowArgs} args - Arguments to find a Images
     * @example
     * // Get one Images
     * const images = await prisma.images.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends imagesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, imagesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__imagesClient<$Result.GetResult<Prisma.$imagesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Images that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {imagesFindFirstArgs} args - Arguments to find a Images
     * @example
     * // Get one Images
     * const images = await prisma.images.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends imagesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, imagesFindFirstArgs<ExtArgs>>
    ): Prisma__imagesClient<$Result.GetResult<Prisma.$imagesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Images that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {imagesFindFirstOrThrowArgs} args - Arguments to find a Images
     * @example
     * // Get one Images
     * const images = await prisma.images.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends imagesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, imagesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__imagesClient<$Result.GetResult<Prisma.$imagesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Images that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {imagesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Images
     * const images = await prisma.images.findMany()
     * 
     * // Get first 10 Images
     * const images = await prisma.images.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const imagesWithIdOnly = await prisma.images.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends imagesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, imagesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$imagesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Images.
     * @param {imagesCreateArgs} args - Arguments to create a Images.
     * @example
     * // Create one Images
     * const Images = await prisma.images.create({
     *   data: {
     *     // ... data to create a Images
     *   }
     * })
     * 
    **/
    create<T extends imagesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, imagesCreateArgs<ExtArgs>>
    ): Prisma__imagesClient<$Result.GetResult<Prisma.$imagesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Images.
     *     @param {imagesCreateManyArgs} args - Arguments to create many Images.
     *     @example
     *     // Create many Images
     *     const images = await prisma.images.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends imagesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, imagesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Images.
     * @param {imagesDeleteArgs} args - Arguments to delete one Images.
     * @example
     * // Delete one Images
     * const Images = await prisma.images.delete({
     *   where: {
     *     // ... filter to delete one Images
     *   }
     * })
     * 
    **/
    delete<T extends imagesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, imagesDeleteArgs<ExtArgs>>
    ): Prisma__imagesClient<$Result.GetResult<Prisma.$imagesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Images.
     * @param {imagesUpdateArgs} args - Arguments to update one Images.
     * @example
     * // Update one Images
     * const images = await prisma.images.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends imagesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, imagesUpdateArgs<ExtArgs>>
    ): Prisma__imagesClient<$Result.GetResult<Prisma.$imagesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Images.
     * @param {imagesDeleteManyArgs} args - Arguments to filter Images to delete.
     * @example
     * // Delete a few Images
     * const { count } = await prisma.images.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends imagesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, imagesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {imagesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Images
     * const images = await prisma.images.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends imagesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, imagesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Images.
     * @param {imagesUpsertArgs} args - Arguments to update or create a Images.
     * @example
     * // Update or create a Images
     * const images = await prisma.images.upsert({
     *   create: {
     *     // ... data to create a Images
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Images we want to update
     *   }
     * })
    **/
    upsert<T extends imagesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, imagesUpsertArgs<ExtArgs>>
    ): Prisma__imagesClient<$Result.GetResult<Prisma.$imagesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {imagesCountArgs} args - Arguments to filter Images to count.
     * @example
     * // Count the number of Images
     * const count = await prisma.images.count({
     *   where: {
     *     // ... the filter for the Images we want to count
     *   }
     * })
    **/
    count<T extends imagesCountArgs>(
      args?: Subset<T, imagesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ImagesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImagesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ImagesAggregateArgs>(args: Subset<T, ImagesAggregateArgs>): Prisma.PrismaPromise<GetImagesAggregateType<T>>

    /**
     * Group by Images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {imagesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends imagesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: imagesGroupByArgs['orderBy'] }
        : { orderBy?: imagesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, imagesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetImagesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the images model
   */
  readonly fields: imagesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for images.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__imagesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the images model
   */ 
  interface imagesFieldRefs {
    readonly id: FieldRef<"images", 'String'>
    readonly data: FieldRef<"images", 'Bytes'>
    readonly name: FieldRef<"images", 'String'>
  }
    

  // Custom InputTypes

  /**
   * images findUnique
   */
  export type imagesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the images
     */
    select?: imagesSelect<ExtArgs> | null
    /**
     * Filter, which images to fetch.
     */
    where: imagesWhereUniqueInput
  }


  /**
   * images findUniqueOrThrow
   */
  export type imagesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the images
     */
    select?: imagesSelect<ExtArgs> | null
    /**
     * Filter, which images to fetch.
     */
    where: imagesWhereUniqueInput
  }


  /**
   * images findFirst
   */
  export type imagesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the images
     */
    select?: imagesSelect<ExtArgs> | null
    /**
     * Filter, which images to fetch.
     */
    where?: imagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of images to fetch.
     */
    orderBy?: imagesOrderByWithRelationInput | imagesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for images.
     */
    cursor?: imagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of images.
     */
    distinct?: ImagesScalarFieldEnum | ImagesScalarFieldEnum[]
  }


  /**
   * images findFirstOrThrow
   */
  export type imagesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the images
     */
    select?: imagesSelect<ExtArgs> | null
    /**
     * Filter, which images to fetch.
     */
    where?: imagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of images to fetch.
     */
    orderBy?: imagesOrderByWithRelationInput | imagesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for images.
     */
    cursor?: imagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of images.
     */
    distinct?: ImagesScalarFieldEnum | ImagesScalarFieldEnum[]
  }


  /**
   * images findMany
   */
  export type imagesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the images
     */
    select?: imagesSelect<ExtArgs> | null
    /**
     * Filter, which images to fetch.
     */
    where?: imagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of images to fetch.
     */
    orderBy?: imagesOrderByWithRelationInput | imagesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing images.
     */
    cursor?: imagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` images.
     */
    skip?: number
    distinct?: ImagesScalarFieldEnum | ImagesScalarFieldEnum[]
  }


  /**
   * images create
   */
  export type imagesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the images
     */
    select?: imagesSelect<ExtArgs> | null
    /**
     * The data needed to create a images.
     */
    data: XOR<imagesCreateInput, imagesUncheckedCreateInput>
  }


  /**
   * images createMany
   */
  export type imagesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many images.
     */
    data: imagesCreateManyInput | imagesCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * images update
   */
  export type imagesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the images
     */
    select?: imagesSelect<ExtArgs> | null
    /**
     * The data needed to update a images.
     */
    data: XOR<imagesUpdateInput, imagesUncheckedUpdateInput>
    /**
     * Choose, which images to update.
     */
    where: imagesWhereUniqueInput
  }


  /**
   * images updateMany
   */
  export type imagesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update images.
     */
    data: XOR<imagesUpdateManyMutationInput, imagesUncheckedUpdateManyInput>
    /**
     * Filter which images to update
     */
    where?: imagesWhereInput
  }


  /**
   * images upsert
   */
  export type imagesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the images
     */
    select?: imagesSelect<ExtArgs> | null
    /**
     * The filter to search for the images to update in case it exists.
     */
    where: imagesWhereUniqueInput
    /**
     * In case the images found by the `where` argument doesn't exist, create a new images with this data.
     */
    create: XOR<imagesCreateInput, imagesUncheckedCreateInput>
    /**
     * In case the images was found with the provided `where` argument, update it with this data.
     */
    update: XOR<imagesUpdateInput, imagesUncheckedUpdateInput>
  }


  /**
   * images delete
   */
  export type imagesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the images
     */
    select?: imagesSelect<ExtArgs> | null
    /**
     * Filter which images to delete.
     */
    where: imagesWhereUniqueInput
  }


  /**
   * images deleteMany
   */
  export type imagesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which images to delete
     */
    where?: imagesWhereInput
  }


  /**
   * images without action
   */
  export type imagesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the images
     */
    select?: imagesSelect<ExtArgs> | null
  }



  /**
   * Model Project_Images
   */

  export type AggregateProject_Images = {
    _count: Project_ImagesCountAggregateOutputType | null
    _min: Project_ImagesMinAggregateOutputType | null
    _max: Project_ImagesMaxAggregateOutputType | null
  }

  export type Project_ImagesMinAggregateOutputType = {
    id: string | null
    data: Buffer | null
    name: string | null
  }

  export type Project_ImagesMaxAggregateOutputType = {
    id: string | null
    data: Buffer | null
    name: string | null
  }

  export type Project_ImagesCountAggregateOutputType = {
    id: number
    data: number
    name: number
    _all: number
  }


  export type Project_ImagesMinAggregateInputType = {
    id?: true
    data?: true
    name?: true
  }

  export type Project_ImagesMaxAggregateInputType = {
    id?: true
    data?: true
    name?: true
  }

  export type Project_ImagesCountAggregateInputType = {
    id?: true
    data?: true
    name?: true
    _all?: true
  }

  export type Project_ImagesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Project_Images to aggregate.
     */
    where?: Project_ImagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Project_Images to fetch.
     */
    orderBy?: Project_ImagesOrderByWithRelationInput | Project_ImagesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Project_ImagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Project_Images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Project_Images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Project_Images
    **/
    _count?: true | Project_ImagesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Project_ImagesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Project_ImagesMaxAggregateInputType
  }

  export type GetProject_ImagesAggregateType<T extends Project_ImagesAggregateArgs> = {
        [P in keyof T & keyof AggregateProject_Images]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProject_Images[P]>
      : GetScalarType<T[P], AggregateProject_Images[P]>
  }




  export type Project_ImagesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Project_ImagesWhereInput
    orderBy?: Project_ImagesOrderByWithAggregationInput | Project_ImagesOrderByWithAggregationInput[]
    by: Project_ImagesScalarFieldEnum[] | Project_ImagesScalarFieldEnum
    having?: Project_ImagesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Project_ImagesCountAggregateInputType | true
    _min?: Project_ImagesMinAggregateInputType
    _max?: Project_ImagesMaxAggregateInputType
  }

  export type Project_ImagesGroupByOutputType = {
    id: string
    data: Buffer
    name: string
    _count: Project_ImagesCountAggregateOutputType | null
    _min: Project_ImagesMinAggregateOutputType | null
    _max: Project_ImagesMaxAggregateOutputType | null
  }

  type GetProject_ImagesGroupByPayload<T extends Project_ImagesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Project_ImagesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Project_ImagesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Project_ImagesGroupByOutputType[P]>
            : GetScalarType<T[P], Project_ImagesGroupByOutputType[P]>
        }
      >
    >


  export type Project_ImagesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    data?: boolean
    name?: boolean
  }, ExtArgs["result"]["project_Images"]>

  export type Project_ImagesSelectScalar = {
    id?: boolean
    data?: boolean
    name?: boolean
  }


  export type $Project_ImagesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Project_Images"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      data: Buffer
      name: string
    }, ExtArgs["result"]["project_Images"]>
    composites: {}
  }


  type Project_ImagesGetPayload<S extends boolean | null | undefined | Project_ImagesDefaultArgs> = $Result.GetResult<Prisma.$Project_ImagesPayload, S>

  type Project_ImagesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<Project_ImagesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Project_ImagesCountAggregateInputType | true
    }

  export interface Project_ImagesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Project_Images'], meta: { name: 'Project_Images' } }
    /**
     * Find zero or one Project_Images that matches the filter.
     * @param {Project_ImagesFindUniqueArgs} args - Arguments to find a Project_Images
     * @example
     * // Get one Project_Images
     * const project_Images = await prisma.project_Images.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Project_ImagesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, Project_ImagesFindUniqueArgs<ExtArgs>>
    ): Prisma__Project_ImagesClient<$Result.GetResult<Prisma.$Project_ImagesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Project_Images that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {Project_ImagesFindUniqueOrThrowArgs} args - Arguments to find a Project_Images
     * @example
     * // Get one Project_Images
     * const project_Images = await prisma.project_Images.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends Project_ImagesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Project_ImagesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__Project_ImagesClient<$Result.GetResult<Prisma.$Project_ImagesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Project_Images that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Project_ImagesFindFirstArgs} args - Arguments to find a Project_Images
     * @example
     * // Get one Project_Images
     * const project_Images = await prisma.project_Images.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Project_ImagesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, Project_ImagesFindFirstArgs<ExtArgs>>
    ): Prisma__Project_ImagesClient<$Result.GetResult<Prisma.$Project_ImagesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Project_Images that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Project_ImagesFindFirstOrThrowArgs} args - Arguments to find a Project_Images
     * @example
     * // Get one Project_Images
     * const project_Images = await prisma.project_Images.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends Project_ImagesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Project_ImagesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__Project_ImagesClient<$Result.GetResult<Prisma.$Project_ImagesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Project_Images that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Project_ImagesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Project_Images
     * const project_Images = await prisma.project_Images.findMany()
     * 
     * // Get first 10 Project_Images
     * const project_Images = await prisma.project_Images.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const project_ImagesWithIdOnly = await prisma.project_Images.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends Project_ImagesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Project_ImagesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Project_ImagesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Project_Images.
     * @param {Project_ImagesCreateArgs} args - Arguments to create a Project_Images.
     * @example
     * // Create one Project_Images
     * const Project_Images = await prisma.project_Images.create({
     *   data: {
     *     // ... data to create a Project_Images
     *   }
     * })
     * 
    **/
    create<T extends Project_ImagesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, Project_ImagesCreateArgs<ExtArgs>>
    ): Prisma__Project_ImagesClient<$Result.GetResult<Prisma.$Project_ImagesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Project_Images.
     *     @param {Project_ImagesCreateManyArgs} args - Arguments to create many Project_Images.
     *     @example
     *     // Create many Project_Images
     *     const project_Images = await prisma.project_Images.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends Project_ImagesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Project_ImagesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Project_Images.
     * @param {Project_ImagesDeleteArgs} args - Arguments to delete one Project_Images.
     * @example
     * // Delete one Project_Images
     * const Project_Images = await prisma.project_Images.delete({
     *   where: {
     *     // ... filter to delete one Project_Images
     *   }
     * })
     * 
    **/
    delete<T extends Project_ImagesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, Project_ImagesDeleteArgs<ExtArgs>>
    ): Prisma__Project_ImagesClient<$Result.GetResult<Prisma.$Project_ImagesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Project_Images.
     * @param {Project_ImagesUpdateArgs} args - Arguments to update one Project_Images.
     * @example
     * // Update one Project_Images
     * const project_Images = await prisma.project_Images.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Project_ImagesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, Project_ImagesUpdateArgs<ExtArgs>>
    ): Prisma__Project_ImagesClient<$Result.GetResult<Prisma.$Project_ImagesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Project_Images.
     * @param {Project_ImagesDeleteManyArgs} args - Arguments to filter Project_Images to delete.
     * @example
     * // Delete a few Project_Images
     * const { count } = await prisma.project_Images.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Project_ImagesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Project_ImagesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Project_Images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Project_ImagesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Project_Images
     * const project_Images = await prisma.project_Images.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Project_ImagesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, Project_ImagesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Project_Images.
     * @param {Project_ImagesUpsertArgs} args - Arguments to update or create a Project_Images.
     * @example
     * // Update or create a Project_Images
     * const project_Images = await prisma.project_Images.upsert({
     *   create: {
     *     // ... data to create a Project_Images
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Project_Images we want to update
     *   }
     * })
    **/
    upsert<T extends Project_ImagesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, Project_ImagesUpsertArgs<ExtArgs>>
    ): Prisma__Project_ImagesClient<$Result.GetResult<Prisma.$Project_ImagesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Project_Images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Project_ImagesCountArgs} args - Arguments to filter Project_Images to count.
     * @example
     * // Count the number of Project_Images
     * const count = await prisma.project_Images.count({
     *   where: {
     *     // ... the filter for the Project_Images we want to count
     *   }
     * })
    **/
    count<T extends Project_ImagesCountArgs>(
      args?: Subset<T, Project_ImagesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Project_ImagesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Project_Images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Project_ImagesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Project_ImagesAggregateArgs>(args: Subset<T, Project_ImagesAggregateArgs>): Prisma.PrismaPromise<GetProject_ImagesAggregateType<T>>

    /**
     * Group by Project_Images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Project_ImagesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Project_ImagesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Project_ImagesGroupByArgs['orderBy'] }
        : { orderBy?: Project_ImagesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Project_ImagesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProject_ImagesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Project_Images model
   */
  readonly fields: Project_ImagesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Project_Images.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Project_ImagesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Project_Images model
   */ 
  interface Project_ImagesFieldRefs {
    readonly id: FieldRef<"Project_Images", 'String'>
    readonly data: FieldRef<"Project_Images", 'Bytes'>
    readonly name: FieldRef<"Project_Images", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Project_Images findUnique
   */
  export type Project_ImagesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project_Images
     */
    select?: Project_ImagesSelect<ExtArgs> | null
    /**
     * Filter, which Project_Images to fetch.
     */
    where: Project_ImagesWhereUniqueInput
  }


  /**
   * Project_Images findUniqueOrThrow
   */
  export type Project_ImagesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project_Images
     */
    select?: Project_ImagesSelect<ExtArgs> | null
    /**
     * Filter, which Project_Images to fetch.
     */
    where: Project_ImagesWhereUniqueInput
  }


  /**
   * Project_Images findFirst
   */
  export type Project_ImagesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project_Images
     */
    select?: Project_ImagesSelect<ExtArgs> | null
    /**
     * Filter, which Project_Images to fetch.
     */
    where?: Project_ImagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Project_Images to fetch.
     */
    orderBy?: Project_ImagesOrderByWithRelationInput | Project_ImagesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Project_Images.
     */
    cursor?: Project_ImagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Project_Images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Project_Images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Project_Images.
     */
    distinct?: Project_ImagesScalarFieldEnum | Project_ImagesScalarFieldEnum[]
  }


  /**
   * Project_Images findFirstOrThrow
   */
  export type Project_ImagesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project_Images
     */
    select?: Project_ImagesSelect<ExtArgs> | null
    /**
     * Filter, which Project_Images to fetch.
     */
    where?: Project_ImagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Project_Images to fetch.
     */
    orderBy?: Project_ImagesOrderByWithRelationInput | Project_ImagesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Project_Images.
     */
    cursor?: Project_ImagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Project_Images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Project_Images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Project_Images.
     */
    distinct?: Project_ImagesScalarFieldEnum | Project_ImagesScalarFieldEnum[]
  }


  /**
   * Project_Images findMany
   */
  export type Project_ImagesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project_Images
     */
    select?: Project_ImagesSelect<ExtArgs> | null
    /**
     * Filter, which Project_Images to fetch.
     */
    where?: Project_ImagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Project_Images to fetch.
     */
    orderBy?: Project_ImagesOrderByWithRelationInput | Project_ImagesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Project_Images.
     */
    cursor?: Project_ImagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Project_Images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Project_Images.
     */
    skip?: number
    distinct?: Project_ImagesScalarFieldEnum | Project_ImagesScalarFieldEnum[]
  }


  /**
   * Project_Images create
   */
  export type Project_ImagesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project_Images
     */
    select?: Project_ImagesSelect<ExtArgs> | null
    /**
     * The data needed to create a Project_Images.
     */
    data: XOR<Project_ImagesCreateInput, Project_ImagesUncheckedCreateInput>
  }


  /**
   * Project_Images createMany
   */
  export type Project_ImagesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Project_Images.
     */
    data: Project_ImagesCreateManyInput | Project_ImagesCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Project_Images update
   */
  export type Project_ImagesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project_Images
     */
    select?: Project_ImagesSelect<ExtArgs> | null
    /**
     * The data needed to update a Project_Images.
     */
    data: XOR<Project_ImagesUpdateInput, Project_ImagesUncheckedUpdateInput>
    /**
     * Choose, which Project_Images to update.
     */
    where: Project_ImagesWhereUniqueInput
  }


  /**
   * Project_Images updateMany
   */
  export type Project_ImagesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Project_Images.
     */
    data: XOR<Project_ImagesUpdateManyMutationInput, Project_ImagesUncheckedUpdateManyInput>
    /**
     * Filter which Project_Images to update
     */
    where?: Project_ImagesWhereInput
  }


  /**
   * Project_Images upsert
   */
  export type Project_ImagesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project_Images
     */
    select?: Project_ImagesSelect<ExtArgs> | null
    /**
     * The filter to search for the Project_Images to update in case it exists.
     */
    where: Project_ImagesWhereUniqueInput
    /**
     * In case the Project_Images found by the `where` argument doesn't exist, create a new Project_Images with this data.
     */
    create: XOR<Project_ImagesCreateInput, Project_ImagesUncheckedCreateInput>
    /**
     * In case the Project_Images was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Project_ImagesUpdateInput, Project_ImagesUncheckedUpdateInput>
  }


  /**
   * Project_Images delete
   */
  export type Project_ImagesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project_Images
     */
    select?: Project_ImagesSelect<ExtArgs> | null
    /**
     * Filter which Project_Images to delete.
     */
    where: Project_ImagesWhereUniqueInput
  }


  /**
   * Project_Images deleteMany
   */
  export type Project_ImagesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Project_Images to delete
     */
    where?: Project_ImagesWhereInput
  }


  /**
   * Project_Images without action
   */
  export type Project_ImagesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project_Images
     */
    select?: Project_ImagesSelect<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const PositionScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type PositionScalarFieldEnum = (typeof PositionScalarFieldEnum)[keyof typeof PositionScalarFieldEnum]


  export const Kahlova_MemberScalarFieldEnum: {
    id: 'id',
    name: 'name',
    password: 'password',
    email: 'email',
    avatar: 'avatar',
    positionid: 'positionid',
    create_at: 'create_at',
    isConfirm: 'isConfirm',
    verification_token: 'verification_token'
  };

  export type Kahlova_MemberScalarFieldEnum = (typeof Kahlova_MemberScalarFieldEnum)[keyof typeof Kahlova_MemberScalarFieldEnum]


  export const Kahlova_ProjectScalarFieldEnum: {
    id: 'id',
    name: 'name',
    bio: 'bio',
    categori: 'categori',
    project_picture: 'project_picture',
    techmade: 'techmade'
  };

  export type Kahlova_ProjectScalarFieldEnum = (typeof Kahlova_ProjectScalarFieldEnum)[keyof typeof Kahlova_ProjectScalarFieldEnum]


  export const Project_CategoriScalarFieldEnum: {
    name: 'name'
  };

  export type Project_CategoriScalarFieldEnum = (typeof Project_CategoriScalarFieldEnum)[keyof typeof Project_CategoriScalarFieldEnum]


  export const ImagesScalarFieldEnum: {
    id: 'id',
    data: 'data',
    name: 'name'
  };

  export type ImagesScalarFieldEnum = (typeof ImagesScalarFieldEnum)[keyof typeof ImagesScalarFieldEnum]


  export const Project_ImagesScalarFieldEnum: {
    id: 'id',
    data: 'data',
    name: 'name'
  };

  export type Project_ImagesScalarFieldEnum = (typeof Project_ImagesScalarFieldEnum)[keyof typeof Project_ImagesScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Bytes'
   */
  export type BytesFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Bytes'>
    


  /**
   * Reference to a field of type 'Bytes[]'
   */
  export type ListBytesFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Bytes[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type PositionWhereInput = {
    AND?: PositionWhereInput | PositionWhereInput[]
    OR?: PositionWhereInput[]
    NOT?: PositionWhereInput | PositionWhereInput[]
    id?: IntFilter<"Position"> | number
    name?: StringFilter<"Position"> | string
    Kahlova_Member?: Kahlova_MemberListRelationFilter
  }

  export type PositionOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    Kahlova_Member?: Kahlova_MemberOrderByRelationAggregateInput
  }

  export type PositionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PositionWhereInput | PositionWhereInput[]
    OR?: PositionWhereInput[]
    NOT?: PositionWhereInput | PositionWhereInput[]
    name?: StringFilter<"Position"> | string
    Kahlova_Member?: Kahlova_MemberListRelationFilter
  }, "id">

  export type PositionOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: PositionCountOrderByAggregateInput
    _avg?: PositionAvgOrderByAggregateInput
    _max?: PositionMaxOrderByAggregateInput
    _min?: PositionMinOrderByAggregateInput
    _sum?: PositionSumOrderByAggregateInput
  }

  export type PositionScalarWhereWithAggregatesInput = {
    AND?: PositionScalarWhereWithAggregatesInput | PositionScalarWhereWithAggregatesInput[]
    OR?: PositionScalarWhereWithAggregatesInput[]
    NOT?: PositionScalarWhereWithAggregatesInput | PositionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Position"> | number
    name?: StringWithAggregatesFilter<"Position"> | string
  }

  export type Kahlova_MemberWhereInput = {
    AND?: Kahlova_MemberWhereInput | Kahlova_MemberWhereInput[]
    OR?: Kahlova_MemberWhereInput[]
    NOT?: Kahlova_MemberWhereInput | Kahlova_MemberWhereInput[]
    id?: IntFilter<"Kahlova_Member"> | number
    name?: StringNullableFilter<"Kahlova_Member"> | string | null
    password?: StringNullableFilter<"Kahlova_Member"> | string | null
    email?: StringNullableFilter<"Kahlova_Member"> | string | null
    avatar?: StringNullableFilter<"Kahlova_Member"> | string | null
    positionid?: IntNullableFilter<"Kahlova_Member"> | number | null
    create_at?: DateTimeFilter<"Kahlova_Member"> | Date | string
    isConfirm?: BoolFilter<"Kahlova_Member"> | boolean
    verification_token?: StringFilter<"Kahlova_Member"> | string
    Position?: XOR<PositionNullableRelationFilter, PositionWhereInput> | null
  }

  export type Kahlova_MemberOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    avatar?: SortOrderInput | SortOrder
    positionid?: SortOrderInput | SortOrder
    create_at?: SortOrder
    isConfirm?: SortOrder
    verification_token?: SortOrder
    Position?: PositionOrderByWithRelationInput
  }

  export type Kahlova_MemberWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    verification_token?: string
    AND?: Kahlova_MemberWhereInput | Kahlova_MemberWhereInput[]
    OR?: Kahlova_MemberWhereInput[]
    NOT?: Kahlova_MemberWhereInput | Kahlova_MemberWhereInput[]
    name?: StringNullableFilter<"Kahlova_Member"> | string | null
    password?: StringNullableFilter<"Kahlova_Member"> | string | null
    avatar?: StringNullableFilter<"Kahlova_Member"> | string | null
    positionid?: IntNullableFilter<"Kahlova_Member"> | number | null
    create_at?: DateTimeFilter<"Kahlova_Member"> | Date | string
    isConfirm?: BoolFilter<"Kahlova_Member"> | boolean
    Position?: XOR<PositionNullableRelationFilter, PositionWhereInput> | null
  }, "id" | "email" | "verification_token">

  export type Kahlova_MemberOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    avatar?: SortOrderInput | SortOrder
    positionid?: SortOrderInput | SortOrder
    create_at?: SortOrder
    isConfirm?: SortOrder
    verification_token?: SortOrder
    _count?: Kahlova_MemberCountOrderByAggregateInput
    _avg?: Kahlova_MemberAvgOrderByAggregateInput
    _max?: Kahlova_MemberMaxOrderByAggregateInput
    _min?: Kahlova_MemberMinOrderByAggregateInput
    _sum?: Kahlova_MemberSumOrderByAggregateInput
  }

  export type Kahlova_MemberScalarWhereWithAggregatesInput = {
    AND?: Kahlova_MemberScalarWhereWithAggregatesInput | Kahlova_MemberScalarWhereWithAggregatesInput[]
    OR?: Kahlova_MemberScalarWhereWithAggregatesInput[]
    NOT?: Kahlova_MemberScalarWhereWithAggregatesInput | Kahlova_MemberScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Kahlova_Member"> | number
    name?: StringNullableWithAggregatesFilter<"Kahlova_Member"> | string | null
    password?: StringNullableWithAggregatesFilter<"Kahlova_Member"> | string | null
    email?: StringNullableWithAggregatesFilter<"Kahlova_Member"> | string | null
    avatar?: StringNullableWithAggregatesFilter<"Kahlova_Member"> | string | null
    positionid?: IntNullableWithAggregatesFilter<"Kahlova_Member"> | number | null
    create_at?: DateTimeWithAggregatesFilter<"Kahlova_Member"> | Date | string
    isConfirm?: BoolWithAggregatesFilter<"Kahlova_Member"> | boolean
    verification_token?: StringWithAggregatesFilter<"Kahlova_Member"> | string
  }

  export type Kahlova_ProjectWhereInput = {
    AND?: Kahlova_ProjectWhereInput | Kahlova_ProjectWhereInput[]
    OR?: Kahlova_ProjectWhereInput[]
    NOT?: Kahlova_ProjectWhereInput | Kahlova_ProjectWhereInput[]
    id?: StringFilter<"Kahlova_Project"> | string
    name?: StringFilter<"Kahlova_Project"> | string
    bio?: StringFilter<"Kahlova_Project"> | string
    categori?: StringFilter<"Kahlova_Project"> | string
    project_picture?: StringNullableListFilter<"Kahlova_Project">
    techmade?: StringNullableListFilter<"Kahlova_Project">
    categories?: XOR<Project_CategoriRelationFilter, Project_CategoriWhereInput>
  }

  export type Kahlova_ProjectOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    bio?: SortOrder
    categori?: SortOrder
    project_picture?: SortOrder
    techmade?: SortOrder
    categories?: Project_CategoriOrderByWithRelationInput
  }

  export type Kahlova_ProjectWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: Kahlova_ProjectWhereInput | Kahlova_ProjectWhereInput[]
    OR?: Kahlova_ProjectWhereInput[]
    NOT?: Kahlova_ProjectWhereInput | Kahlova_ProjectWhereInput[]
    name?: StringFilter<"Kahlova_Project"> | string
    bio?: StringFilter<"Kahlova_Project"> | string
    categori?: StringFilter<"Kahlova_Project"> | string
    project_picture?: StringNullableListFilter<"Kahlova_Project">
    techmade?: StringNullableListFilter<"Kahlova_Project">
    categories?: XOR<Project_CategoriRelationFilter, Project_CategoriWhereInput>
  }, "id">

  export type Kahlova_ProjectOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    bio?: SortOrder
    categori?: SortOrder
    project_picture?: SortOrder
    techmade?: SortOrder
    _count?: Kahlova_ProjectCountOrderByAggregateInput
    _max?: Kahlova_ProjectMaxOrderByAggregateInput
    _min?: Kahlova_ProjectMinOrderByAggregateInput
  }

  export type Kahlova_ProjectScalarWhereWithAggregatesInput = {
    AND?: Kahlova_ProjectScalarWhereWithAggregatesInput | Kahlova_ProjectScalarWhereWithAggregatesInput[]
    OR?: Kahlova_ProjectScalarWhereWithAggregatesInput[]
    NOT?: Kahlova_ProjectScalarWhereWithAggregatesInput | Kahlova_ProjectScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Kahlova_Project"> | string
    name?: StringWithAggregatesFilter<"Kahlova_Project"> | string
    bio?: StringWithAggregatesFilter<"Kahlova_Project"> | string
    categori?: StringWithAggregatesFilter<"Kahlova_Project"> | string
    project_picture?: StringNullableListFilter<"Kahlova_Project">
    techmade?: StringNullableListFilter<"Kahlova_Project">
  }

  export type Project_CategoriWhereInput = {
    AND?: Project_CategoriWhereInput | Project_CategoriWhereInput[]
    OR?: Project_CategoriWhereInput[]
    NOT?: Project_CategoriWhereInput | Project_CategoriWhereInput[]
    name?: StringFilter<"Project_Categori"> | string
    Kahlova_Project?: Kahlova_ProjectListRelationFilter
  }

  export type Project_CategoriOrderByWithRelationInput = {
    name?: SortOrder
    Kahlova_Project?: Kahlova_ProjectOrderByRelationAggregateInput
  }

  export type Project_CategoriWhereUniqueInput = Prisma.AtLeast<{
    name?: string
    AND?: Project_CategoriWhereInput | Project_CategoriWhereInput[]
    OR?: Project_CategoriWhereInput[]
    NOT?: Project_CategoriWhereInput | Project_CategoriWhereInput[]
    Kahlova_Project?: Kahlova_ProjectListRelationFilter
  }, "name">

  export type Project_CategoriOrderByWithAggregationInput = {
    name?: SortOrder
    _count?: Project_CategoriCountOrderByAggregateInput
    _max?: Project_CategoriMaxOrderByAggregateInput
    _min?: Project_CategoriMinOrderByAggregateInput
  }

  export type Project_CategoriScalarWhereWithAggregatesInput = {
    AND?: Project_CategoriScalarWhereWithAggregatesInput | Project_CategoriScalarWhereWithAggregatesInput[]
    OR?: Project_CategoriScalarWhereWithAggregatesInput[]
    NOT?: Project_CategoriScalarWhereWithAggregatesInput | Project_CategoriScalarWhereWithAggregatesInput[]
    name?: StringWithAggregatesFilter<"Project_Categori"> | string
  }

  export type imagesWhereInput = {
    AND?: imagesWhereInput | imagesWhereInput[]
    OR?: imagesWhereInput[]
    NOT?: imagesWhereInput | imagesWhereInput[]
    id?: StringFilter<"images"> | string
    data?: BytesFilter<"images"> | Buffer
    name?: StringFilter<"images"> | string
  }

  export type imagesOrderByWithRelationInput = {
    id?: SortOrder
    data?: SortOrder
    name?: SortOrder
  }

  export type imagesWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: imagesWhereInput | imagesWhereInput[]
    OR?: imagesWhereInput[]
    NOT?: imagesWhereInput | imagesWhereInput[]
    data?: BytesFilter<"images"> | Buffer
    name?: StringFilter<"images"> | string
  }, "id">

  export type imagesOrderByWithAggregationInput = {
    id?: SortOrder
    data?: SortOrder
    name?: SortOrder
    _count?: imagesCountOrderByAggregateInput
    _max?: imagesMaxOrderByAggregateInput
    _min?: imagesMinOrderByAggregateInput
  }

  export type imagesScalarWhereWithAggregatesInput = {
    AND?: imagesScalarWhereWithAggregatesInput | imagesScalarWhereWithAggregatesInput[]
    OR?: imagesScalarWhereWithAggregatesInput[]
    NOT?: imagesScalarWhereWithAggregatesInput | imagesScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"images"> | string
    data?: BytesWithAggregatesFilter<"images"> | Buffer
    name?: StringWithAggregatesFilter<"images"> | string
  }

  export type Project_ImagesWhereInput = {
    AND?: Project_ImagesWhereInput | Project_ImagesWhereInput[]
    OR?: Project_ImagesWhereInput[]
    NOT?: Project_ImagesWhereInput | Project_ImagesWhereInput[]
    id?: StringFilter<"Project_Images"> | string
    data?: BytesFilter<"Project_Images"> | Buffer
    name?: StringFilter<"Project_Images"> | string
  }

  export type Project_ImagesOrderByWithRelationInput = {
    id?: SortOrder
    data?: SortOrder
    name?: SortOrder
  }

  export type Project_ImagesWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: Project_ImagesWhereInput | Project_ImagesWhereInput[]
    OR?: Project_ImagesWhereInput[]
    NOT?: Project_ImagesWhereInput | Project_ImagesWhereInput[]
    data?: BytesFilter<"Project_Images"> | Buffer
    name?: StringFilter<"Project_Images"> | string
  }, "id">

  export type Project_ImagesOrderByWithAggregationInput = {
    id?: SortOrder
    data?: SortOrder
    name?: SortOrder
    _count?: Project_ImagesCountOrderByAggregateInput
    _max?: Project_ImagesMaxOrderByAggregateInput
    _min?: Project_ImagesMinOrderByAggregateInput
  }

  export type Project_ImagesScalarWhereWithAggregatesInput = {
    AND?: Project_ImagesScalarWhereWithAggregatesInput | Project_ImagesScalarWhereWithAggregatesInput[]
    OR?: Project_ImagesScalarWhereWithAggregatesInput[]
    NOT?: Project_ImagesScalarWhereWithAggregatesInput | Project_ImagesScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Project_Images"> | string
    data?: BytesWithAggregatesFilter<"Project_Images"> | Buffer
    name?: StringWithAggregatesFilter<"Project_Images"> | string
  }

  export type PositionCreateInput = {
    name: string
    Kahlova_Member?: Kahlova_MemberCreateNestedManyWithoutPositionInput
  }

  export type PositionUncheckedCreateInput = {
    id?: number
    name: string
    Kahlova_Member?: Kahlova_MemberUncheckedCreateNestedManyWithoutPositionInput
  }

  export type PositionUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    Kahlova_Member?: Kahlova_MemberUpdateManyWithoutPositionNestedInput
  }

  export type PositionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    Kahlova_Member?: Kahlova_MemberUncheckedUpdateManyWithoutPositionNestedInput
  }

  export type PositionCreateManyInput = {
    id?: number
    name: string
  }

  export type PositionUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type PositionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type Kahlova_MemberCreateInput = {
    name?: string | null
    password?: string | null
    email?: string | null
    avatar?: string | null
    create_at?: Date | string
    isConfirm?: boolean
    verification_token: string
    Position?: PositionCreateNestedOneWithoutKahlova_MemberInput
  }

  export type Kahlova_MemberUncheckedCreateInput = {
    id?: number
    name?: string | null
    password?: string | null
    email?: string | null
    avatar?: string | null
    positionid?: number | null
    create_at?: Date | string
    isConfirm?: boolean
    verification_token: string
  }

  export type Kahlova_MemberUpdateInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    create_at?: DateTimeFieldUpdateOperationsInput | Date | string
    isConfirm?: BoolFieldUpdateOperationsInput | boolean
    verification_token?: StringFieldUpdateOperationsInput | string
    Position?: PositionUpdateOneWithoutKahlova_MemberNestedInput
  }

  export type Kahlova_MemberUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    positionid?: NullableIntFieldUpdateOperationsInput | number | null
    create_at?: DateTimeFieldUpdateOperationsInput | Date | string
    isConfirm?: BoolFieldUpdateOperationsInput | boolean
    verification_token?: StringFieldUpdateOperationsInput | string
  }

  export type Kahlova_MemberCreateManyInput = {
    id?: number
    name?: string | null
    password?: string | null
    email?: string | null
    avatar?: string | null
    positionid?: number | null
    create_at?: Date | string
    isConfirm?: boolean
    verification_token: string
  }

  export type Kahlova_MemberUpdateManyMutationInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    create_at?: DateTimeFieldUpdateOperationsInput | Date | string
    isConfirm?: BoolFieldUpdateOperationsInput | boolean
    verification_token?: StringFieldUpdateOperationsInput | string
  }

  export type Kahlova_MemberUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    positionid?: NullableIntFieldUpdateOperationsInput | number | null
    create_at?: DateTimeFieldUpdateOperationsInput | Date | string
    isConfirm?: BoolFieldUpdateOperationsInput | boolean
    verification_token?: StringFieldUpdateOperationsInput | string
  }

  export type Kahlova_ProjectCreateInput = {
    id?: string
    name: string
    bio: string
    project_picture?: Kahlova_ProjectCreateproject_pictureInput | string[]
    techmade?: Kahlova_ProjectCreatetechmadeInput | string[]
    categories: Project_CategoriCreateNestedOneWithoutKahlova_ProjectInput
  }

  export type Kahlova_ProjectUncheckedCreateInput = {
    id?: string
    name: string
    bio: string
    categori: string
    project_picture?: Kahlova_ProjectCreateproject_pictureInput | string[]
    techmade?: Kahlova_ProjectCreatetechmadeInput | string[]
  }

  export type Kahlova_ProjectUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    project_picture?: Kahlova_ProjectUpdateproject_pictureInput | string[]
    techmade?: Kahlova_ProjectUpdatetechmadeInput | string[]
    categories?: Project_CategoriUpdateOneRequiredWithoutKahlova_ProjectNestedInput
  }

  export type Kahlova_ProjectUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    categori?: StringFieldUpdateOperationsInput | string
    project_picture?: Kahlova_ProjectUpdateproject_pictureInput | string[]
    techmade?: Kahlova_ProjectUpdatetechmadeInput | string[]
  }

  export type Kahlova_ProjectCreateManyInput = {
    id?: string
    name: string
    bio: string
    categori: string
    project_picture?: Kahlova_ProjectCreateproject_pictureInput | string[]
    techmade?: Kahlova_ProjectCreatetechmadeInput | string[]
  }

  export type Kahlova_ProjectUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    project_picture?: Kahlova_ProjectUpdateproject_pictureInput | string[]
    techmade?: Kahlova_ProjectUpdatetechmadeInput | string[]
  }

  export type Kahlova_ProjectUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    categori?: StringFieldUpdateOperationsInput | string
    project_picture?: Kahlova_ProjectUpdateproject_pictureInput | string[]
    techmade?: Kahlova_ProjectUpdatetechmadeInput | string[]
  }

  export type Project_CategoriCreateInput = {
    name: string
    Kahlova_Project?: Kahlova_ProjectCreateNestedManyWithoutCategoriesInput
  }

  export type Project_CategoriUncheckedCreateInput = {
    name: string
    Kahlova_Project?: Kahlova_ProjectUncheckedCreateNestedManyWithoutCategoriesInput
  }

  export type Project_CategoriUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    Kahlova_Project?: Kahlova_ProjectUpdateManyWithoutCategoriesNestedInput
  }

  export type Project_CategoriUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    Kahlova_Project?: Kahlova_ProjectUncheckedUpdateManyWithoutCategoriesNestedInput
  }

  export type Project_CategoriCreateManyInput = {
    name: string
  }

  export type Project_CategoriUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type Project_CategoriUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type imagesCreateInput = {
    id?: string
    data: Buffer
    name: string
  }

  export type imagesUncheckedCreateInput = {
    id?: string
    data: Buffer
    name: string
  }

  export type imagesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    data?: BytesFieldUpdateOperationsInput | Buffer
    name?: StringFieldUpdateOperationsInput | string
  }

  export type imagesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    data?: BytesFieldUpdateOperationsInput | Buffer
    name?: StringFieldUpdateOperationsInput | string
  }

  export type imagesCreateManyInput = {
    id?: string
    data: Buffer
    name: string
  }

  export type imagesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    data?: BytesFieldUpdateOperationsInput | Buffer
    name?: StringFieldUpdateOperationsInput | string
  }

  export type imagesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    data?: BytesFieldUpdateOperationsInput | Buffer
    name?: StringFieldUpdateOperationsInput | string
  }

  export type Project_ImagesCreateInput = {
    id?: string
    data: Buffer
    name: string
  }

  export type Project_ImagesUncheckedCreateInput = {
    id?: string
    data: Buffer
    name: string
  }

  export type Project_ImagesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    data?: BytesFieldUpdateOperationsInput | Buffer
    name?: StringFieldUpdateOperationsInput | string
  }

  export type Project_ImagesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    data?: BytesFieldUpdateOperationsInput | Buffer
    name?: StringFieldUpdateOperationsInput | string
  }

  export type Project_ImagesCreateManyInput = {
    id?: string
    data: Buffer
    name: string
  }

  export type Project_ImagesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    data?: BytesFieldUpdateOperationsInput | Buffer
    name?: StringFieldUpdateOperationsInput | string
  }

  export type Project_ImagesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    data?: BytesFieldUpdateOperationsInput | Buffer
    name?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type Kahlova_MemberListRelationFilter = {
    every?: Kahlova_MemberWhereInput
    some?: Kahlova_MemberWhereInput
    none?: Kahlova_MemberWhereInput
  }

  export type Kahlova_MemberOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PositionCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type PositionAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PositionMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type PositionMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type PositionSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type PositionNullableRelationFilter = {
    is?: PositionWhereInput | null
    isNot?: PositionWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type Kahlova_MemberCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    password?: SortOrder
    email?: SortOrder
    avatar?: SortOrder
    positionid?: SortOrder
    create_at?: SortOrder
    isConfirm?: SortOrder
    verification_token?: SortOrder
  }

  export type Kahlova_MemberAvgOrderByAggregateInput = {
    id?: SortOrder
    positionid?: SortOrder
  }

  export type Kahlova_MemberMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    password?: SortOrder
    email?: SortOrder
    avatar?: SortOrder
    positionid?: SortOrder
    create_at?: SortOrder
    isConfirm?: SortOrder
    verification_token?: SortOrder
  }

  export type Kahlova_MemberMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    password?: SortOrder
    email?: SortOrder
    avatar?: SortOrder
    positionid?: SortOrder
    create_at?: SortOrder
    isConfirm?: SortOrder
    verification_token?: SortOrder
  }

  export type Kahlova_MemberSumOrderByAggregateInput = {
    id?: SortOrder
    positionid?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type Project_CategoriRelationFilter = {
    is?: Project_CategoriWhereInput
    isNot?: Project_CategoriWhereInput
  }

  export type Kahlova_ProjectCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    bio?: SortOrder
    categori?: SortOrder
    project_picture?: SortOrder
    techmade?: SortOrder
  }

  export type Kahlova_ProjectMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    bio?: SortOrder
    categori?: SortOrder
  }

  export type Kahlova_ProjectMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    bio?: SortOrder
    categori?: SortOrder
  }

  export type Kahlova_ProjectListRelationFilter = {
    every?: Kahlova_ProjectWhereInput
    some?: Kahlova_ProjectWhereInput
    none?: Kahlova_ProjectWhereInput
  }

  export type Kahlova_ProjectOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type Project_CategoriCountOrderByAggregateInput = {
    name?: SortOrder
  }

  export type Project_CategoriMaxOrderByAggregateInput = {
    name?: SortOrder
  }

  export type Project_CategoriMinOrderByAggregateInput = {
    name?: SortOrder
  }

  export type BytesFilter<$PrismaModel = never> = {
    equals?: Buffer | BytesFieldRefInput<$PrismaModel>
    in?: Buffer[] | ListBytesFieldRefInput<$PrismaModel>
    notIn?: Buffer[] | ListBytesFieldRefInput<$PrismaModel>
    not?: NestedBytesFilter<$PrismaModel> | Buffer
  }

  export type imagesCountOrderByAggregateInput = {
    id?: SortOrder
    data?: SortOrder
    name?: SortOrder
  }

  export type imagesMaxOrderByAggregateInput = {
    id?: SortOrder
    data?: SortOrder
    name?: SortOrder
  }

  export type imagesMinOrderByAggregateInput = {
    id?: SortOrder
    data?: SortOrder
    name?: SortOrder
  }

  export type BytesWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Buffer | BytesFieldRefInput<$PrismaModel>
    in?: Buffer[] | ListBytesFieldRefInput<$PrismaModel>
    notIn?: Buffer[] | ListBytesFieldRefInput<$PrismaModel>
    not?: NestedBytesWithAggregatesFilter<$PrismaModel> | Buffer
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBytesFilter<$PrismaModel>
    _max?: NestedBytesFilter<$PrismaModel>
  }

  export type Project_ImagesCountOrderByAggregateInput = {
    id?: SortOrder
    data?: SortOrder
    name?: SortOrder
  }

  export type Project_ImagesMaxOrderByAggregateInput = {
    id?: SortOrder
    data?: SortOrder
    name?: SortOrder
  }

  export type Project_ImagesMinOrderByAggregateInput = {
    id?: SortOrder
    data?: SortOrder
    name?: SortOrder
  }

  export type Kahlova_MemberCreateNestedManyWithoutPositionInput = {
    create?: XOR<Kahlova_MemberCreateWithoutPositionInput, Kahlova_MemberUncheckedCreateWithoutPositionInput> | Kahlova_MemberCreateWithoutPositionInput[] | Kahlova_MemberUncheckedCreateWithoutPositionInput[]
    connectOrCreate?: Kahlova_MemberCreateOrConnectWithoutPositionInput | Kahlova_MemberCreateOrConnectWithoutPositionInput[]
    createMany?: Kahlova_MemberCreateManyPositionInputEnvelope
    connect?: Kahlova_MemberWhereUniqueInput | Kahlova_MemberWhereUniqueInput[]
  }

  export type Kahlova_MemberUncheckedCreateNestedManyWithoutPositionInput = {
    create?: XOR<Kahlova_MemberCreateWithoutPositionInput, Kahlova_MemberUncheckedCreateWithoutPositionInput> | Kahlova_MemberCreateWithoutPositionInput[] | Kahlova_MemberUncheckedCreateWithoutPositionInput[]
    connectOrCreate?: Kahlova_MemberCreateOrConnectWithoutPositionInput | Kahlova_MemberCreateOrConnectWithoutPositionInput[]
    createMany?: Kahlova_MemberCreateManyPositionInputEnvelope
    connect?: Kahlova_MemberWhereUniqueInput | Kahlova_MemberWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type Kahlova_MemberUpdateManyWithoutPositionNestedInput = {
    create?: XOR<Kahlova_MemberCreateWithoutPositionInput, Kahlova_MemberUncheckedCreateWithoutPositionInput> | Kahlova_MemberCreateWithoutPositionInput[] | Kahlova_MemberUncheckedCreateWithoutPositionInput[]
    connectOrCreate?: Kahlova_MemberCreateOrConnectWithoutPositionInput | Kahlova_MemberCreateOrConnectWithoutPositionInput[]
    upsert?: Kahlova_MemberUpsertWithWhereUniqueWithoutPositionInput | Kahlova_MemberUpsertWithWhereUniqueWithoutPositionInput[]
    createMany?: Kahlova_MemberCreateManyPositionInputEnvelope
    set?: Kahlova_MemberWhereUniqueInput | Kahlova_MemberWhereUniqueInput[]
    disconnect?: Kahlova_MemberWhereUniqueInput | Kahlova_MemberWhereUniqueInput[]
    delete?: Kahlova_MemberWhereUniqueInput | Kahlova_MemberWhereUniqueInput[]
    connect?: Kahlova_MemberWhereUniqueInput | Kahlova_MemberWhereUniqueInput[]
    update?: Kahlova_MemberUpdateWithWhereUniqueWithoutPositionInput | Kahlova_MemberUpdateWithWhereUniqueWithoutPositionInput[]
    updateMany?: Kahlova_MemberUpdateManyWithWhereWithoutPositionInput | Kahlova_MemberUpdateManyWithWhereWithoutPositionInput[]
    deleteMany?: Kahlova_MemberScalarWhereInput | Kahlova_MemberScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type Kahlova_MemberUncheckedUpdateManyWithoutPositionNestedInput = {
    create?: XOR<Kahlova_MemberCreateWithoutPositionInput, Kahlova_MemberUncheckedCreateWithoutPositionInput> | Kahlova_MemberCreateWithoutPositionInput[] | Kahlova_MemberUncheckedCreateWithoutPositionInput[]
    connectOrCreate?: Kahlova_MemberCreateOrConnectWithoutPositionInput | Kahlova_MemberCreateOrConnectWithoutPositionInput[]
    upsert?: Kahlova_MemberUpsertWithWhereUniqueWithoutPositionInput | Kahlova_MemberUpsertWithWhereUniqueWithoutPositionInput[]
    createMany?: Kahlova_MemberCreateManyPositionInputEnvelope
    set?: Kahlova_MemberWhereUniqueInput | Kahlova_MemberWhereUniqueInput[]
    disconnect?: Kahlova_MemberWhereUniqueInput | Kahlova_MemberWhereUniqueInput[]
    delete?: Kahlova_MemberWhereUniqueInput | Kahlova_MemberWhereUniqueInput[]
    connect?: Kahlova_MemberWhereUniqueInput | Kahlova_MemberWhereUniqueInput[]
    update?: Kahlova_MemberUpdateWithWhereUniqueWithoutPositionInput | Kahlova_MemberUpdateWithWhereUniqueWithoutPositionInput[]
    updateMany?: Kahlova_MemberUpdateManyWithWhereWithoutPositionInput | Kahlova_MemberUpdateManyWithWhereWithoutPositionInput[]
    deleteMany?: Kahlova_MemberScalarWhereInput | Kahlova_MemberScalarWhereInput[]
  }

  export type PositionCreateNestedOneWithoutKahlova_MemberInput = {
    create?: XOR<PositionCreateWithoutKahlova_MemberInput, PositionUncheckedCreateWithoutKahlova_MemberInput>
    connectOrCreate?: PositionCreateOrConnectWithoutKahlova_MemberInput
    connect?: PositionWhereUniqueInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type PositionUpdateOneWithoutKahlova_MemberNestedInput = {
    create?: XOR<PositionCreateWithoutKahlova_MemberInput, PositionUncheckedCreateWithoutKahlova_MemberInput>
    connectOrCreate?: PositionCreateOrConnectWithoutKahlova_MemberInput
    upsert?: PositionUpsertWithoutKahlova_MemberInput
    disconnect?: PositionWhereInput | boolean
    delete?: PositionWhereInput | boolean
    connect?: PositionWhereUniqueInput
    update?: XOR<XOR<PositionUpdateToOneWithWhereWithoutKahlova_MemberInput, PositionUpdateWithoutKahlova_MemberInput>, PositionUncheckedUpdateWithoutKahlova_MemberInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type Kahlova_ProjectCreateproject_pictureInput = {
    set: string[]
  }

  export type Kahlova_ProjectCreatetechmadeInput = {
    set: string[]
  }

  export type Project_CategoriCreateNestedOneWithoutKahlova_ProjectInput = {
    create?: XOR<Project_CategoriCreateWithoutKahlova_ProjectInput, Project_CategoriUncheckedCreateWithoutKahlova_ProjectInput>
    connectOrCreate?: Project_CategoriCreateOrConnectWithoutKahlova_ProjectInput
    connect?: Project_CategoriWhereUniqueInput
  }

  export type Kahlova_ProjectUpdateproject_pictureInput = {
    set?: string[]
    push?: string | string[]
  }

  export type Kahlova_ProjectUpdatetechmadeInput = {
    set?: string[]
    push?: string | string[]
  }

  export type Project_CategoriUpdateOneRequiredWithoutKahlova_ProjectNestedInput = {
    create?: XOR<Project_CategoriCreateWithoutKahlova_ProjectInput, Project_CategoriUncheckedCreateWithoutKahlova_ProjectInput>
    connectOrCreate?: Project_CategoriCreateOrConnectWithoutKahlova_ProjectInput
    upsert?: Project_CategoriUpsertWithoutKahlova_ProjectInput
    connect?: Project_CategoriWhereUniqueInput
    update?: XOR<XOR<Project_CategoriUpdateToOneWithWhereWithoutKahlova_ProjectInput, Project_CategoriUpdateWithoutKahlova_ProjectInput>, Project_CategoriUncheckedUpdateWithoutKahlova_ProjectInput>
  }

  export type Kahlova_ProjectCreateNestedManyWithoutCategoriesInput = {
    create?: XOR<Kahlova_ProjectCreateWithoutCategoriesInput, Kahlova_ProjectUncheckedCreateWithoutCategoriesInput> | Kahlova_ProjectCreateWithoutCategoriesInput[] | Kahlova_ProjectUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: Kahlova_ProjectCreateOrConnectWithoutCategoriesInput | Kahlova_ProjectCreateOrConnectWithoutCategoriesInput[]
    createMany?: Kahlova_ProjectCreateManyCategoriesInputEnvelope
    connect?: Kahlova_ProjectWhereUniqueInput | Kahlova_ProjectWhereUniqueInput[]
  }

  export type Kahlova_ProjectUncheckedCreateNestedManyWithoutCategoriesInput = {
    create?: XOR<Kahlova_ProjectCreateWithoutCategoriesInput, Kahlova_ProjectUncheckedCreateWithoutCategoriesInput> | Kahlova_ProjectCreateWithoutCategoriesInput[] | Kahlova_ProjectUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: Kahlova_ProjectCreateOrConnectWithoutCategoriesInput | Kahlova_ProjectCreateOrConnectWithoutCategoriesInput[]
    createMany?: Kahlova_ProjectCreateManyCategoriesInputEnvelope
    connect?: Kahlova_ProjectWhereUniqueInput | Kahlova_ProjectWhereUniqueInput[]
  }

  export type Kahlova_ProjectUpdateManyWithoutCategoriesNestedInput = {
    create?: XOR<Kahlova_ProjectCreateWithoutCategoriesInput, Kahlova_ProjectUncheckedCreateWithoutCategoriesInput> | Kahlova_ProjectCreateWithoutCategoriesInput[] | Kahlova_ProjectUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: Kahlova_ProjectCreateOrConnectWithoutCategoriesInput | Kahlova_ProjectCreateOrConnectWithoutCategoriesInput[]
    upsert?: Kahlova_ProjectUpsertWithWhereUniqueWithoutCategoriesInput | Kahlova_ProjectUpsertWithWhereUniqueWithoutCategoriesInput[]
    createMany?: Kahlova_ProjectCreateManyCategoriesInputEnvelope
    set?: Kahlova_ProjectWhereUniqueInput | Kahlova_ProjectWhereUniqueInput[]
    disconnect?: Kahlova_ProjectWhereUniqueInput | Kahlova_ProjectWhereUniqueInput[]
    delete?: Kahlova_ProjectWhereUniqueInput | Kahlova_ProjectWhereUniqueInput[]
    connect?: Kahlova_ProjectWhereUniqueInput | Kahlova_ProjectWhereUniqueInput[]
    update?: Kahlova_ProjectUpdateWithWhereUniqueWithoutCategoriesInput | Kahlova_ProjectUpdateWithWhereUniqueWithoutCategoriesInput[]
    updateMany?: Kahlova_ProjectUpdateManyWithWhereWithoutCategoriesInput | Kahlova_ProjectUpdateManyWithWhereWithoutCategoriesInput[]
    deleteMany?: Kahlova_ProjectScalarWhereInput | Kahlova_ProjectScalarWhereInput[]
  }

  export type Kahlova_ProjectUncheckedUpdateManyWithoutCategoriesNestedInput = {
    create?: XOR<Kahlova_ProjectCreateWithoutCategoriesInput, Kahlova_ProjectUncheckedCreateWithoutCategoriesInput> | Kahlova_ProjectCreateWithoutCategoriesInput[] | Kahlova_ProjectUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: Kahlova_ProjectCreateOrConnectWithoutCategoriesInput | Kahlova_ProjectCreateOrConnectWithoutCategoriesInput[]
    upsert?: Kahlova_ProjectUpsertWithWhereUniqueWithoutCategoriesInput | Kahlova_ProjectUpsertWithWhereUniqueWithoutCategoriesInput[]
    createMany?: Kahlova_ProjectCreateManyCategoriesInputEnvelope
    set?: Kahlova_ProjectWhereUniqueInput | Kahlova_ProjectWhereUniqueInput[]
    disconnect?: Kahlova_ProjectWhereUniqueInput | Kahlova_ProjectWhereUniqueInput[]
    delete?: Kahlova_ProjectWhereUniqueInput | Kahlova_ProjectWhereUniqueInput[]
    connect?: Kahlova_ProjectWhereUniqueInput | Kahlova_ProjectWhereUniqueInput[]
    update?: Kahlova_ProjectUpdateWithWhereUniqueWithoutCategoriesInput | Kahlova_ProjectUpdateWithWhereUniqueWithoutCategoriesInput[]
    updateMany?: Kahlova_ProjectUpdateManyWithWhereWithoutCategoriesInput | Kahlova_ProjectUpdateManyWithWhereWithoutCategoriesInput[]
    deleteMany?: Kahlova_ProjectScalarWhereInput | Kahlova_ProjectScalarWhereInput[]
  }

  export type BytesFieldUpdateOperationsInput = {
    set?: Buffer
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedBytesFilter<$PrismaModel = never> = {
    equals?: Buffer | BytesFieldRefInput<$PrismaModel>
    in?: Buffer[] | ListBytesFieldRefInput<$PrismaModel>
    notIn?: Buffer[] | ListBytesFieldRefInput<$PrismaModel>
    not?: NestedBytesFilter<$PrismaModel> | Buffer
  }

  export type NestedBytesWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Buffer | BytesFieldRefInput<$PrismaModel>
    in?: Buffer[] | ListBytesFieldRefInput<$PrismaModel>
    notIn?: Buffer[] | ListBytesFieldRefInput<$PrismaModel>
    not?: NestedBytesWithAggregatesFilter<$PrismaModel> | Buffer
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBytesFilter<$PrismaModel>
    _max?: NestedBytesFilter<$PrismaModel>
  }

  export type Kahlova_MemberCreateWithoutPositionInput = {
    name?: string | null
    password?: string | null
    email?: string | null
    avatar?: string | null
    create_at?: Date | string
    isConfirm?: boolean
    verification_token: string
  }

  export type Kahlova_MemberUncheckedCreateWithoutPositionInput = {
    id?: number
    name?: string | null
    password?: string | null
    email?: string | null
    avatar?: string | null
    create_at?: Date | string
    isConfirm?: boolean
    verification_token: string
  }

  export type Kahlova_MemberCreateOrConnectWithoutPositionInput = {
    where: Kahlova_MemberWhereUniqueInput
    create: XOR<Kahlova_MemberCreateWithoutPositionInput, Kahlova_MemberUncheckedCreateWithoutPositionInput>
  }

  export type Kahlova_MemberCreateManyPositionInputEnvelope = {
    data: Kahlova_MemberCreateManyPositionInput | Kahlova_MemberCreateManyPositionInput[]
    skipDuplicates?: boolean
  }

  export type Kahlova_MemberUpsertWithWhereUniqueWithoutPositionInput = {
    where: Kahlova_MemberWhereUniqueInput
    update: XOR<Kahlova_MemberUpdateWithoutPositionInput, Kahlova_MemberUncheckedUpdateWithoutPositionInput>
    create: XOR<Kahlova_MemberCreateWithoutPositionInput, Kahlova_MemberUncheckedCreateWithoutPositionInput>
  }

  export type Kahlova_MemberUpdateWithWhereUniqueWithoutPositionInput = {
    where: Kahlova_MemberWhereUniqueInput
    data: XOR<Kahlova_MemberUpdateWithoutPositionInput, Kahlova_MemberUncheckedUpdateWithoutPositionInput>
  }

  export type Kahlova_MemberUpdateManyWithWhereWithoutPositionInput = {
    where: Kahlova_MemberScalarWhereInput
    data: XOR<Kahlova_MemberUpdateManyMutationInput, Kahlova_MemberUncheckedUpdateManyWithoutPositionInput>
  }

  export type Kahlova_MemberScalarWhereInput = {
    AND?: Kahlova_MemberScalarWhereInput | Kahlova_MemberScalarWhereInput[]
    OR?: Kahlova_MemberScalarWhereInput[]
    NOT?: Kahlova_MemberScalarWhereInput | Kahlova_MemberScalarWhereInput[]
    id?: IntFilter<"Kahlova_Member"> | number
    name?: StringNullableFilter<"Kahlova_Member"> | string | null
    password?: StringNullableFilter<"Kahlova_Member"> | string | null
    email?: StringNullableFilter<"Kahlova_Member"> | string | null
    avatar?: StringNullableFilter<"Kahlova_Member"> | string | null
    positionid?: IntNullableFilter<"Kahlova_Member"> | number | null
    create_at?: DateTimeFilter<"Kahlova_Member"> | Date | string
    isConfirm?: BoolFilter<"Kahlova_Member"> | boolean
    verification_token?: StringFilter<"Kahlova_Member"> | string
  }

  export type PositionCreateWithoutKahlova_MemberInput = {
    name: string
  }

  export type PositionUncheckedCreateWithoutKahlova_MemberInput = {
    id?: number
    name: string
  }

  export type PositionCreateOrConnectWithoutKahlova_MemberInput = {
    where: PositionWhereUniqueInput
    create: XOR<PositionCreateWithoutKahlova_MemberInput, PositionUncheckedCreateWithoutKahlova_MemberInput>
  }

  export type PositionUpsertWithoutKahlova_MemberInput = {
    update: XOR<PositionUpdateWithoutKahlova_MemberInput, PositionUncheckedUpdateWithoutKahlova_MemberInput>
    create: XOR<PositionCreateWithoutKahlova_MemberInput, PositionUncheckedCreateWithoutKahlova_MemberInput>
    where?: PositionWhereInput
  }

  export type PositionUpdateToOneWithWhereWithoutKahlova_MemberInput = {
    where?: PositionWhereInput
    data: XOR<PositionUpdateWithoutKahlova_MemberInput, PositionUncheckedUpdateWithoutKahlova_MemberInput>
  }

  export type PositionUpdateWithoutKahlova_MemberInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type PositionUncheckedUpdateWithoutKahlova_MemberInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type Project_CategoriCreateWithoutKahlova_ProjectInput = {
    name: string
  }

  export type Project_CategoriUncheckedCreateWithoutKahlova_ProjectInput = {
    name: string
  }

  export type Project_CategoriCreateOrConnectWithoutKahlova_ProjectInput = {
    where: Project_CategoriWhereUniqueInput
    create: XOR<Project_CategoriCreateWithoutKahlova_ProjectInput, Project_CategoriUncheckedCreateWithoutKahlova_ProjectInput>
  }

  export type Project_CategoriUpsertWithoutKahlova_ProjectInput = {
    update: XOR<Project_CategoriUpdateWithoutKahlova_ProjectInput, Project_CategoriUncheckedUpdateWithoutKahlova_ProjectInput>
    create: XOR<Project_CategoriCreateWithoutKahlova_ProjectInput, Project_CategoriUncheckedCreateWithoutKahlova_ProjectInput>
    where?: Project_CategoriWhereInput
  }

  export type Project_CategoriUpdateToOneWithWhereWithoutKahlova_ProjectInput = {
    where?: Project_CategoriWhereInput
    data: XOR<Project_CategoriUpdateWithoutKahlova_ProjectInput, Project_CategoriUncheckedUpdateWithoutKahlova_ProjectInput>
  }

  export type Project_CategoriUpdateWithoutKahlova_ProjectInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type Project_CategoriUncheckedUpdateWithoutKahlova_ProjectInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type Kahlova_ProjectCreateWithoutCategoriesInput = {
    id?: string
    name: string
    bio: string
    project_picture?: Kahlova_ProjectCreateproject_pictureInput | string[]
    techmade?: Kahlova_ProjectCreatetechmadeInput | string[]
  }

  export type Kahlova_ProjectUncheckedCreateWithoutCategoriesInput = {
    id?: string
    name: string
    bio: string
    project_picture?: Kahlova_ProjectCreateproject_pictureInput | string[]
    techmade?: Kahlova_ProjectCreatetechmadeInput | string[]
  }

  export type Kahlova_ProjectCreateOrConnectWithoutCategoriesInput = {
    where: Kahlova_ProjectWhereUniqueInput
    create: XOR<Kahlova_ProjectCreateWithoutCategoriesInput, Kahlova_ProjectUncheckedCreateWithoutCategoriesInput>
  }

  export type Kahlova_ProjectCreateManyCategoriesInputEnvelope = {
    data: Kahlova_ProjectCreateManyCategoriesInput | Kahlova_ProjectCreateManyCategoriesInput[]
    skipDuplicates?: boolean
  }

  export type Kahlova_ProjectUpsertWithWhereUniqueWithoutCategoriesInput = {
    where: Kahlova_ProjectWhereUniqueInput
    update: XOR<Kahlova_ProjectUpdateWithoutCategoriesInput, Kahlova_ProjectUncheckedUpdateWithoutCategoriesInput>
    create: XOR<Kahlova_ProjectCreateWithoutCategoriesInput, Kahlova_ProjectUncheckedCreateWithoutCategoriesInput>
  }

  export type Kahlova_ProjectUpdateWithWhereUniqueWithoutCategoriesInput = {
    where: Kahlova_ProjectWhereUniqueInput
    data: XOR<Kahlova_ProjectUpdateWithoutCategoriesInput, Kahlova_ProjectUncheckedUpdateWithoutCategoriesInput>
  }

  export type Kahlova_ProjectUpdateManyWithWhereWithoutCategoriesInput = {
    where: Kahlova_ProjectScalarWhereInput
    data: XOR<Kahlova_ProjectUpdateManyMutationInput, Kahlova_ProjectUncheckedUpdateManyWithoutCategoriesInput>
  }

  export type Kahlova_ProjectScalarWhereInput = {
    AND?: Kahlova_ProjectScalarWhereInput | Kahlova_ProjectScalarWhereInput[]
    OR?: Kahlova_ProjectScalarWhereInput[]
    NOT?: Kahlova_ProjectScalarWhereInput | Kahlova_ProjectScalarWhereInput[]
    id?: StringFilter<"Kahlova_Project"> | string
    name?: StringFilter<"Kahlova_Project"> | string
    bio?: StringFilter<"Kahlova_Project"> | string
    categori?: StringFilter<"Kahlova_Project"> | string
    project_picture?: StringNullableListFilter<"Kahlova_Project">
    techmade?: StringNullableListFilter<"Kahlova_Project">
  }

  export type Kahlova_MemberCreateManyPositionInput = {
    id?: number
    name?: string | null
    password?: string | null
    email?: string | null
    avatar?: string | null
    create_at?: Date | string
    isConfirm?: boolean
    verification_token: string
  }

  export type Kahlova_MemberUpdateWithoutPositionInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    create_at?: DateTimeFieldUpdateOperationsInput | Date | string
    isConfirm?: BoolFieldUpdateOperationsInput | boolean
    verification_token?: StringFieldUpdateOperationsInput | string
  }

  export type Kahlova_MemberUncheckedUpdateWithoutPositionInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    create_at?: DateTimeFieldUpdateOperationsInput | Date | string
    isConfirm?: BoolFieldUpdateOperationsInput | boolean
    verification_token?: StringFieldUpdateOperationsInput | string
  }

  export type Kahlova_MemberUncheckedUpdateManyWithoutPositionInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    create_at?: DateTimeFieldUpdateOperationsInput | Date | string
    isConfirm?: BoolFieldUpdateOperationsInput | boolean
    verification_token?: StringFieldUpdateOperationsInput | string
  }

  export type Kahlova_ProjectCreateManyCategoriesInput = {
    id?: string
    name: string
    bio: string
    project_picture?: Kahlova_ProjectCreateproject_pictureInput | string[]
    techmade?: Kahlova_ProjectCreatetechmadeInput | string[]
  }

  export type Kahlova_ProjectUpdateWithoutCategoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    project_picture?: Kahlova_ProjectUpdateproject_pictureInput | string[]
    techmade?: Kahlova_ProjectUpdatetechmadeInput | string[]
  }

  export type Kahlova_ProjectUncheckedUpdateWithoutCategoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    project_picture?: Kahlova_ProjectUpdateproject_pictureInput | string[]
    techmade?: Kahlova_ProjectUpdatetechmadeInput | string[]
  }

  export type Kahlova_ProjectUncheckedUpdateManyWithoutCategoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    project_picture?: Kahlova_ProjectUpdateproject_pictureInput | string[]
    techmade?: Kahlova_ProjectUpdatetechmadeInput | string[]
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use PositionCountOutputTypeDefaultArgs instead
     */
    export type PositionCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PositionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Project_CategoriCountOutputTypeDefaultArgs instead
     */
    export type Project_CategoriCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Project_CategoriCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PositionDefaultArgs instead
     */
    export type PositionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PositionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Kahlova_MemberDefaultArgs instead
     */
    export type Kahlova_MemberArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Kahlova_MemberDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Kahlova_ProjectDefaultArgs instead
     */
    export type Kahlova_ProjectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Kahlova_ProjectDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Project_CategoriDefaultArgs instead
     */
    export type Project_CategoriArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Project_CategoriDefaultArgs<ExtArgs>
    /**
     * @deprecated Use imagesDefaultArgs instead
     */
    export type imagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = imagesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Project_ImagesDefaultArgs instead
     */
    export type Project_ImagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Project_ImagesDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}